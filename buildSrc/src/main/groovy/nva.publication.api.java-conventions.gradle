plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco-report-aggregation'
    id 'com.diffplug.spotless'
}


group = 'com.github.bibsysdev'

dependencies {
    testImplementation libs.mockito.core
    testImplementation libs.hamcrest.base
    testImplementation libs.hamcrest.core
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.vintage.engine
    testImplementation libs.junit.jupiter.params

    // This is required until Gradle TestSuites are used, note no version is specified as this syncs
    // with JUnit from gradle.
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //To support dynamodb local when testing, using mac m1
    if (System.getProperty("os.arch") == "aarch64") {
        testImplementation group: 'io.github.ganadist.sqlite4java', name: 'libsqlite4java-osx-aarch64', version: '1.0.392'
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven { url = "https://s3.eu-central-1.amazonaws.com/dynamodb-local-frankfurt/release" }
}

tasks.named('test') {
    environment("API_HOST", "localhost")
    useJUnitPlatform {
        excludeTags  = [ "RemoteTest", "integrationTest", "KarateTest" ]
    }
    failFast = false
    testLogging {
        events = [ 'skipped', 'passed', 'failed' ]
        showCauses = true
        exceptionFormat = "full"
    }
}

pmd {
    toolVersion = '7.11.0'
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    toolVersion = '10.18.2'
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}
tasks.withType(Checkstyle) .configureEach{
    reports {
        xml.required
        html.required
        html.stylesheet = rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}


check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {

    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
}

spotless {
    java {
        toggleOffOn() // Ignores sections between `spotless:off` / `spotless:on`
        googleJavaFormat().reflowLongStrings().formatJavadoc(true).reorderImports(true)
    }

    format 'misc', {
        target('.gitignore', '.gitattributes', '.editorconfig', '**/*.gradle')
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    enforceCheck = false // Temporarily disable checking during build until the project is reformatted
}

// Commented out for now, uncomment when the project is reformatted and ready to enforce the formatting rules
//tasks.named('build').configure {
//    dependsOn('spotlessApply')
//}
//
//tasks.named('test').configure {
//    dependsOn('spotlessApply')
//}
