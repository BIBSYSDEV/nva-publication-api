plugins {
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'base'
    id "io.freefair.lombok" version "5.3.0"
    id "maven"
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'

allprojects {
    apply plugin: 'base'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven{url  "https://dl.bintray.com/unit-nva/nva-commons"}
    }

    project.ext {
        awsSdkVersion = '1.11.871'
        awsSdk2Version = '2.14.16'
        nvaDatamodelVersion= "0.11.6"
        nvaCommonsVersion = '1.2.0'
        nvaTestUtilsVersion = "0.1.18"
        junit5Version = '5.6.0'
        jacksonVersion = '2.10.2'
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'maven'

    sourceCompatibility = JavaVersion.VERSION_11
    // source-code version and must be <= targetCompatibility
    targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

    dependencies {

        compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: project.ext.jacksonVersion

        compileOnly group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: project.ext.jacksonVersion

        compileOnly group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: project.ext.jacksonVersion

        compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: project.ext.jacksonVersion

        compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: project.ext.jacksonVersion

        //TODO: restore correct package when new version has been created.
        implementation group: 'com.github.BIBSYSDEV.nva-commons', name: 'core', version: '3decdcea0032394b1e0cb1165c791b4c310ba638'
//        implementation group: 'com.github.bibsysdev', name: 'core', version: project.ext.nvaCommonsVersion
        implementation group: 'com.github.bibsysdev', name: 'identifiers', version: project.ext.nvaCommonsVersion


        testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: project.ext.nvaTestUtilsVersion
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.ext.junit5Version
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.ext.junit5Version
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: project.junit5Version

        testImplementation (group: 'org.javers', name: 'javers-core', version: '5.14.0'){
            because "For comparing java objects and detailing the differences in readable way"
        }

    }

    test {
        useJUnitPlatform{
            excludeTags("RemoteTest")
        }
        failFast = true
        testLogging {
            events 'skipped', 'passed', 'failed'
        }
        finalizedBy jacocoTestReport

        environment 'API_HOST', 'localhost'
        environment 'API_SCHEME', 'https'

    }



    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    check.dependsOn jacocoTestCoverageVerification
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 1.000
                }
            }

            rule {
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 1.000
                }
            }
        }
    }


    // publish submodules
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

}

def getProjectList() {
    // These projects are considered. Replace with a different list as needed.
    subprojects + project
}

task jacocoMerge(type: JacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Merge the JaCoCo data files from all subprojects into one'
    project.afterEvaluate {  // do it at the end of the config phase to be sure all information is present
        FileCollection execFiles = project.objects.fileCollection()   // an empty FileCollection
        getProjectList().each { Project subproject ->
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                def testTasks = subproject.tasks.withType(Test)
                dependsOn(testTasks)   // ensure that .exec files are actually present

                testTasks.each { Test task ->
                    // The JacocoTaskExtension is the source of truth for the location of the .exec file.
                    JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class)
                    if (extension != null) {
                        execFiles.from extension.getDestinationFile()
                    }
                }
            }
        }
        executionData = execFiles
    }
    doFirst {
        // .exec files might be missing if a project has no tests. Filter in execution phase.
        executionData = executionData.filter { it.canRead() }
    }
}

def getReportTasks(JacocoReport pRootTask) {
    getProjectList().collect {
        it.tasks.withType(JacocoReport).findAll { it != pRootTask }
    }.flatten()
}

task jacocoRootReport(type: JacocoReport, dependsOn: tasks.jacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Generates an aggregate report from all subprojects'

    logger.lifecycle 'Using aggregated file: ' + tasks.jacocoMerge.destinationFile
    executionData.from tasks.jacocoMerge.destinationFile

    project.afterEvaluate {
        // The JacocoReport tasks are the source of truth for class files and sources.
        def reportTasks = getReportTasks(tasks.jacocoRootReport)
        classDirectories.from project.files({
            reportTasks.collect {it.classDirectories}.findAll {it != null}
        })
        sourceDirectories.from project.files({
            reportTasks.collect {it.sourceDirectories}.findAll {it != null}
        })
    }

    reports {
        xml.enabled true
    }
}

build {
    dependsOn jacocoRootReport
}
