AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  SAM Template for NVA Publication Service

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaPublicationApi
    Description: NVA publication API
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: ['${CODEBUILD_RESOLVED_SOURCE_VERSION}', '${GIT_REPO}', '@${BUILD_TIMESTAMP}']

Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS,DELETE,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CustomDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: publication
  EventBusName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: EventBusName
  EventBusArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: EventBusArn
  MaxConcurrency:
    Type: Number
    Default: 100
    Description: Max number of provisioned hot instances for a lambda function
  MinConcurrency:
    Type: Number
    Default: 1
    MaxValue: 1
    MinValue: 1
    Description: Min number of provisioned hot instances for a lambda function
  EventBridgeMaxAttempt:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5
    Description: Max attempt to put events into AWS EventBridge Event Bus. Default is 1.
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.
    #temporary parameter
  CristinImportEventBusName:
    Type: String
    Default: orestis-test-bus

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ]]

Resources:

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  #===========================DynamoDB Table========================================================

  NvaResourcesTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete # DeletionPolicy should be added on main branch stacks through use of stack policy
    Properties:
      TableName: !Sub nva-resources-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK0
          AttributeType: S
        - AttributeName: SK0
          AttributeType: S
        - AttributeName: PK1
          AttributeType: S
        - AttributeName: SK1
          AttributeType: S
        - AttributeName: PK2
          AttributeType: S
        - AttributeName: SK2
          AttributeType: S
        - AttributeName: PK3
          AttributeType: S
        - AttributeName: SK3
          AttributeType: S
      KeySchema:
        - AttributeName: PK0
          KeyType: HASH
        - AttributeName: SK0
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ByTypeCustomerStatus
          KeySchema:
            - AttributeName: PK1
              KeyType: HASH
            - AttributeName: SK1
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ByCustomerResource
          KeySchema:
            - AttributeName: PK2
              KeyType: HASH
            - AttributeName: SK2
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ResourcesByIdentifier
          KeySchema:
            - AttributeName: PK3
              KeyType: HASH
            - AttributeName: SK3
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  #===============================DLOQs===================================================================

  DynamodbEventFanoutStreamRecordsDLQ:
    Type: "AWS::SQS::Queue"
  UpdateDoiStatusDLQ:
    Type: "AWS::SQS::Queue"
  DeletePublicationEventProducerDlq:
    Type: "AWS::SQS::Queue"
  PublicationFanoutHandlerDLQ:
    Type: "AWS::SQS::Queue"
  DeleteDraftPublicationHandlerDLQ:
    Type: "AWS::SQS::Queue"
  DoiRequestEventProducerDLQ:
    Type: "AWS::SQS::Queue"


  #==============================ROLES=======================================================================

  DeleteDraftPublicationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !Ref EventBusArn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt DeleteDraftPublicationHandlerDLQ.Arn

  UpdateDoiStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt UpdateDoiStatusDLQ.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

  DefaultLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DefaultLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
        - !Ref DeleteDraftPublicationLambdaRole
        - !Ref UpdateDoiStatusLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:InvokeFunction
            Resource: "*"

  DatabaseAccessLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DatabaseAccessLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
        - !Ref DeleteDraftPublicationLambdaRole
        - !Ref UpdateDoiStatusLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nva-resources-${AWS::StackName}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nva-resources-${AWS::StackName}/index/*

  S3AccessPermsisions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub S3AccessPermsisions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
            Resource: "*"

  EventsLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub EventsLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - events:*
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
            Resource: "*"

  NvaPublicationApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: '2.0'
        info:
          title: NVA Publication API
          version: 1.0.0
        paths:
          /:
            post:
              summary: Create Publication
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: body
                  name: customer
                  description: The Publication to create.
                  schema:
                    $ref: '#/definitions/Publication'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreatePublicationFunction.Arn}:live/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '201':
                  description: Created
                  schema:
                    $ref: '#/definitions/Publication'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
          /{identifier}:
            get:
              summary: Fetch Publication by Identifier
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication to fetch.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchPublicationFunction.Arn}:live/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Publication'
            put:
              summary: Modify Publication for Identifier
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication to modify.
                - in: body
                  name: publication
                  description: The Publication to modify.
                  schema:
                    $ref: '#/definitions/Publication'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaModifyPublicationFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Publication'
            delete:
              summary: Delete Publication for Identifier
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication to delete.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaDeletePublicationFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '202':
                  description: Accepted
                  schema:
                    $ref: '#/definitions/Publication'
          /by-owner:
            get:
              summary: Get Publications by Owner
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublicationsByOwnerFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/Publication'
          /{identifier}/publish:
            put:
              summary: Publish Publication
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication to publish.
              security:
                - CognitoUserPool: [ ]
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublishPublicationFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '202':
                  description: Publishing in progress
                  schema:
                    $ref: '#/definitions/PublicationPublishStatus'
                '204':
                  description: Publish completed
                  schema:
                    $ref: '#/definitions/PublicationPublishStatus'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '404':
                  description: Not Found
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
          /doirequest:
            get:
              summary: Find DOI Requests By Role
              parameters:
                - in: query
                  name: role
                  description: The role used to find DOI requests for.
                  type: string
              security:
                - CognitoUserPool: [ ]
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Publication'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'

                '404':
                  description: Not Found
                  schema:
                    $ref: '#/definitions/Problem'

                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'

              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListDoiRequestsHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
            post:
              summary: Create a DOI request
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: body
                  name: CreateDoiRequest
                  schema:
                    $ref: "#/definitions/CreateDoiRequest"
              responses:
                '201':
                  description: "Created"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateDoiRequestFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
          /update-doi-request/{publicationIdentifier}:
            post:
              summary: Initiate a Update DOI Request process
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: path
                  name: publicationIdentifier
                  description: Publication Identifier (uuid)
                  required: true
                  type: string
                - in: body
                  name: updateDoiRequest
                  description: new status and message
                  schema:
                    $ref: '#/definitions/UpdateDoiRequest'
              responses:
                '202':
                  description: "Accepted"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateDoiRequestHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
          /messages:
            post:
              summary: Create a message.
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: body
                  name: createMessageReuqest
                  required: true
                  schema:
                    $ref: '#/definitions/CreateMessageRequest'
              responses:
                '201':
                  description: "Created"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateMessageFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
            get:
              summary: Get messages for a user.
              security:
                - CognitoUserPool: [ ]
              responses:
                '200':
                  description: "OK"
                  schema:
                    $ref: '#/definitions/ResourceMessages'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaListMessagesFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY

        definitions:
          Publication:
            type: object
          PublicationPublishStatus:
            type: object
            properties:
              message:
                type: string
              statusCode:
                type: integer
          Problem:
            type: object
            properties:
              title:
                type: string
              status:
                type: integer
              detail:
                type: string
          CreateDoiRequest:
            type: object
            properties:
              identifier:
                type: string
                description: The resource identifier
              message:
                type: string
                description: Optional message to Curator
          UpdateDoiRequest:
            type: object
            properties:
              doiRequestStatus:
                $ref: '#/definitions/DoiRequestStatus'
            description: Initiate a Update DOI request process
          DoiRequestMessageDto:
            type: object
            properties:
              message:
                type: string
          DoiRequestStatus:
            description: Enum values for valid doiRequestStatus
            type: string
            enum:
              - REQUESTED
              - APPROVED
              - REJECTED
          ResourceMessages:
            description: Message list for a Publication
            type: object
            properties:
              publication:
                $ref: '#/definitions/Publication'
              messages:
                type: array
                items:
                  $ref: '#/definitions/Message'
          Message:
            description: Message
            type: object
            properties:
              sender:
                type: string
              owner:
                type: string
              date:
                type: string
              messageType:
                type: string
                enum:
                  - DoiRequest
                  - Support
          CreateMessageRequest:
            type: object
            properties:
              publicationIdentifier:
                type: string
              message:
                type: string
              messageType:
                type: string
                enum:
                  - DoiRequest
                  - Support
        securityDefinitions:
          CognitoUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !Ref CognitoAuthorizerArn


  #================================ApiGateway handlers====================================================
  NvaCreatePublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-publication
      Handler: no.unit.nva.publication.create.CreatePublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce # Or Canary10Percent5Minutes, Linear10PercentEvery1Minute, ...
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaPublicationApi

  NvaCreatePublicationFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${NvaCreatePublicationFunction}:live # You need to specify an alias or version here
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: NvaCreatePublicationFunctionAliaslive # This is your function logical ID + "Alias" + what you use for AutoPublishAlias

  NvaCreatePublicationFucntionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: NvaCreatePublicationScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref NvaCreatePublicationFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70 # Any value between 0.1 and 0.9 can be used here
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  NvaCreateDoiRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: doi-requests
      Handler: no.unit.nva.doirequest.create.CreateDoiRequestHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /doirequest
            Method: post
            RestApiId: !Ref NvaPublicationApi


  NvaFetchPublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fetch-publication
      Handler: no.unit.nva.publication.fetch.FetchPublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: get
            RestApiId: !Ref NvaPublicationApi

  NvaFecthPublicationFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${NvaFetchPublicationFunction}:live # You need to specify an alias or version here
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: NvaFetchPublicationFunctionAliaslive # This is your function logical ID + "Alias" + what you use for AutoPublishAlias

  NvaFetchPublicationFucntionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: NvaFetchPublicationFucntionScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref NvaFecthPublicationFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70 # Any value between 0.1 and 0.9 can be used here
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization


  NvaModifyPublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: modify-publication
      Handler: no.unit.nva.publication.modify.ModifyPublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: put
            RestApiId: !Ref NvaPublicationApi

  NvaDeletePublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-publication
      Handler: no.unit.nva.publication.delete.DeletePublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: delete
            RestApiId: !Ref NvaPublicationApi
  NvaPublicationsByOwnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publications-by-owner
      Handler: no.unit.nva.publication.owner.PublicationsByOwnerHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /by-owner
            Method: get
            RestApiId: !Ref NvaPublicationApi

  ListDoiRequestsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: doi-requests
      Handler: no.unit.nva.doirequest.list.ListDoiRequestsHandler::handleRequest
      MemorySize: 768
      Timeout: 600
      Runtime: java11
      Tracing: Active
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /doirequest
            Method: get
            RestApiId: !Ref NvaPublicationApi

  UpdateDoiRequestHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: doi-requests
      Handler: no.unit.nva.doirequest.update.UpdateDoiRequestStatusHandler::handleRequest
      MemorySize: 768
      Timeout: 600
      Runtime: java11
      Tracing: Active
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref CustomDomain
          API_SCHEME: 'https'
          TABLE_NAME: !Ref NvaResourcesTable
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /update-doi-request/{publicationIdentifier}
            Method: post
            RestApiId: !Ref NvaPublicationApi


  NvaPublishPublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publish-publication
      Handler: no.unit.nva.publication.publish.PublishPublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
          TABLE_NAME: !Ref NvaResourcesTable
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{identifier}/publish
            Method: put
            RestApiId: !Ref NvaPublicationApi

  NvaCreateMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: messages
      Handler: no.unit.nva.publication.messages.CreateMessageHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /messages
            Method: post
            RestApiId: !Ref NvaPublicationApi

  NvaListMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: messages
      Handler: no.unit.nva.pubication.messages.ListMessagesHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /messages
            Method: get
            RestApiId: !Ref NvaPublicationApi


  #==========================Event Lambda functions====================================================

  DeletePublicationEventProducer:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-publication-event-producer
      Handler: no.unit.nva.publication.DeletePublicationEventProducerHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Role: !GetAtt LambdaRole.Arn
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail:
                responsePayload:
                  type:
                    - publication.update
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt DeletePublicationEventProducerDlq.Arn

  DoiRequestEventProducer:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-event-dtopublicationdoi-producer
      Handler: no.unit.nva.doi.event.producer.DoiRequestEventProducer::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !Ref EventBusName
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          BASE_PATH: !Ref CustomDomainBasePath
          DOMAIN_NAME: !Ref CustomDomain
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail-type: [ "Lambda Function Invocation Result - Success" ] #Lambda destinations detail-type
              detail:
                responsePayload:
                  type: [ "publication.update" ]
                  newPublication:
                    doiRequest:
                      type: [ { "exists": true } ] # "exists" works only in leaf nodes.

      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt DoiRequestEventProducerDLQ.Arn


  PublicationFanoutHandler:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-fanout-handler
      Handler: no.unit.nva.publication.events.PublicationFanoutHandler::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern: {
              "detail-type": [ "dynamodb-stream-event" ],
              "resources": [
                !GetAtt NvaResourcesTable.StreamArn
              ]
            }
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt PublicationFanoutHandlerDLQ.Arn


  DeleteDraftPublicationHandler:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-draft-publication-handler
      Handler: no.unit.nva.publication.delete.DeleteDraftPublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Role: !GetAtt DeleteDraftPublicationLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail:
                responsePayload:
                  type:
                    - delete.publication
                  hasDoi:
                    - false
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt DeleteDraftPublicationHandlerDLQ.Arn


  DynamodbEventFanoutStreamRecordsEventBridgeHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dynamodb-event-emitter
      # DynamodbStream -> Publish DynamodbEvent to EventBridge
      Handler: no.unit.nva.doi.lambda.DynamodbEventFanoutStreamRecordsEventBridgeHandler::handleRequest
      MemorySize: 768
      Timeout: 360
      Runtime: java11
      Tracing: Active
      Environment:
        Variables:
          DLQ_URL: !Ref DynamodbEventFanoutStreamRecordsDLQ
          MAX_ATTEMPT: !Ref EventBridgeMaxAttempt
          EVENT_BUS_NAME: !Ref EventBusName
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DynamodbEventFanoutStreamRecordsDLQ.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: '*'
      Events:
        FanoutSource:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt NvaResourcesTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            Enabled: true


  UpdateDoiStatusHandlerFunction:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update-doi-status
      Handler: no.unit.nva.doi.handler.UpdateDoiStatusHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Role: !GetAtt UpdateDoiStatusLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail-type:
                #Standard detail-type for successful invocation of Lambda function using Lambda destinations
                - "Lambda Function Invocation Result - Success"
              detail:
                responsePayload:
                  type:
                    - doi.updateDoiStatus
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt UpdateDoiStatusDLQ.Arn


  CristinEntriesEventEmitter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cristin-import
      Handler: no.unit.nva.cristin.lambda.CristinEntriesEventEmitter::handleRequest
      Runtime: java11
      MemorySize: 4096
      Timeout: 300 # 5 min timeout
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          TABLE_NAME: !Ref NvaResourcesTable
          EVENT_BUS: !Ref CristinImportEventBusName
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref CristinImportEventBusName
            Pattern:
              detail-type:
                - import.cristin.filename-event

  CristinEntriesEventConsumer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cristin-import
      Handler: no.unit.nva.cristin.lambda.CristinEntryEventConsumer::handleRequest
      Runtime: java11
      MemorySize: 4096
      Timeout: 300 # 5 min timeout
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          TABLE_NAME: !Ref NvaResourcesTable
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref CristinImportEventBusName
            Pattern:
              detail-type:
                - import.cristin.entry-event


  #==========================Manually triggered functions=============================================
  ImportFromS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: data-import-from-s3
      Handler: no.unit.nva.dataimport.DataImportHandler::importAllFilesFromFolder
      Runtime: java11
      MemorySize: 2400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId



  MigrateData:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: data-migration
      Handler: no.unit.nva.publication.migration.DataMigrationHandler::handleRequest
      Runtime: java11
      MemorySize: 2400
      Timeout: 900
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          TABLE_NAME: !Ref NvaResourcesTable

  CristinImport:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cristin-import
      Handler: no.unit.nva.cristin.lambda.CristinImportHandler::handleRequest
      Runtime: java11
      MemorySize: 4096
      Timeout: 300 # 5 min timeout
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          TABLE_NAME: !Ref NvaResourcesTable

  CristinFilenameEventEmitter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cristin-import
      Handler: no.unit.nva.cristin.lambda.CristinFilenameEventEmitter::handleRequest
      Runtime: java11
      MemorySize: 4096
      Timeout: 300 # 5 min timeout
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          TABLE_NAME: !Ref NvaResourcesTable
          EVENT_BUS: !Ref CristinImportEventBusName



  #===========================BasePathMappings========================================================

  NvaPublicationBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref NvaPublicationApi
      Stage: !Ref NvaPublicationApi.Stage