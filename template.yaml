AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaPublicationApi
    Description: NVA publication API
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: ['${CODEBUILD_RESOLVED_SOURCE_VERSION}', '${GIT_REPO}', '@${BUILD_TIMESTAMP}']

Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: String
    Description: Reference to Cognito UserPool for the stage
  CustomDomain:
    Type: String
    Description: Custom API to connect this lambda to
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
  PublicationsTableName:
    Type: String
    Description: Reference to table containing publications
    Default: nva_publications
  PublicationsByOwnerIndexName:
    Type: String
    Description: Reference to index containing publications by owner
    Default: ByPublisher
  PublicationsDoiRequestsByStatusIndexName:
    Type: String
    Description: Reference to index containing publications by owner
    Default: doiRequestsByStatus
  PublishedPublicationsIndexName:
    Type: String
    Description: Reference to index containing published publications
    Default: ByStatePublishedDate
  DynamoDBStreamArn:
    Type: String
    Description: Amazon DynamoDB Stream ARN.
  EventBusName:
    Type: String
    Default: "default"
    Description: AWS EventBridge Event Bus Name.
  FailureQueueName:
    Type: String
    Default: delete-me-fail-queue
  EventBridgeMaxAttempt:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5
    Description: Max attempt to put events into AWS EventBridge Event Bus. Default is 1.

Resources:

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  NvaPublicationApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: '2.0'
        info:
          title: NVA Publication API
          version: '1.0'
        paths:
          /:
            get:
              summary: List published publications ordered by date desc
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: query
                  name: pagesize
                  type: string
                  required: false
                  description: Maximum number of wanted publications in response.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaListPublicationsFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Publication'

            post:
              summary: Create Publication
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: []
              parameters:
                - in: body
                  name: customer
                  description: The Publication to create.
                  schema:
                    $ref: '#/definitions/Publication'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreatePublicationFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '201':
                  description: Created
                  schema:
                    $ref: '#/definitions/Publication'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
          /{identifier}:
            get:
              summary: Fetch Publication by Identifier
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication to fetch.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchPublicationFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Publication'
            put:
              summary: Modify Publication for Identifier
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: []
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication to modify.
                - in: body
                  name: publication
                  description: The Publication to modify.
                  schema:
                    $ref: '#/definitions/Publication'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaModifyPublicationFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Publication'
          /by-owner:
            get:
              summary: Get Publications by Owner
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublicationsByOwnerFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    type: list
                    items:
                      $ref: '#/definitions/Publication'
          /{identifier}/publish:
            put:
              summary: Publish Publication
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Publication to publish.
              security:
                - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublishPublicationFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '202':
                  description: Publishing in progress
                  schema:
                    $ref: '#/definitions/PublishPublicationStatus'
                '204':
                  description: Publish completed
                  schema:
                    $ref: '#/definitions/PublishPublicationStatus'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '404':
                  description: Not Found
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
        definitions:
          Publication:
            type: object
          PublicationPublishStatus:
            type: object
            properties:
              message:
                type: string
              statusCode:
                type: integer
          Problem:
            type: object
            properties:
              title:
                type: string
              status:
                type: integer
              detail:
                type: string
        securityDefinitions:
          CognitoUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !Ref CognitoAuthorizerArn
  NvaPublicationCommonsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: publication-commons-layer
      Description: Publication Commons
      ContentUri: publication-commons/build/distributions/publication-commons.zip
      CompatibleRuntimes:
        - java11
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain
  NvaCreatePublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-publication
      Handler: no.unit.nva.publication.create.CreatePublicationHandler::handleRequest
      Layers:
        - !Ref NvaPublicationCommonsLayer
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref PublicationsTableName
          BY_PUBLISHER_INDEX_NAME: !Ref PublicationsByOwnerIndexName
          BY_PUBLISHED_PUBLICATIONS_INDEX_NAME: !Ref PublishedPublicationsIndexName
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PublicationsTableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaPublicationApi
  NvaFetchPublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fetch-publication
      Handler: no.unit.nva.publication.fetch.FetchPublicationHandler::handleRequest
      Layers:
        - !Ref NvaPublicationCommonsLayer
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref PublicationsTableName
          BY_PUBLISHER_INDEX_NAME: !Ref PublicationsByOwnerIndexName
          BY_PUBLISHED_PUBLICATIONS_INDEX_NAME: !Ref PublishedPublicationsIndexName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PublicationsTableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: get
            RestApiId: !Ref NvaPublicationApi
  NvaModifyPublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: modify-publication
      Handler: no.unit.nva.publication.modify.ModifyPublicationHandler::handleRequest
      Layers:
        - !Ref NvaPublicationCommonsLayer
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref PublicationsTableName
          BY_PUBLISHER_INDEX_NAME: !Ref PublicationsByOwnerIndexName
          BY_PUBLISHED_PUBLICATIONS_INDEX_NAME: !Ref PublishedPublicationsIndexName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PublicationsTableName
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: put
            RestApiId: !Ref NvaPublicationApi
  NvaPublicationsByOwnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publications-by-owner
      Handler: no.unit.nva.publication.owner.PublicationsByOwnerHandler::handleRequest
      Layers:
        - !Ref NvaPublicationCommonsLayer
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref PublicationsTableName
          BY_PUBLISHER_INDEX_NAME: !Ref PublicationsByOwnerIndexName
          BY_PUBLISHED_PUBLICATIONS_INDEX_NAME: !Ref PublishedPublicationsIndexName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PublicationsTableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /by-owner
            Method: get
            RestApiId: !Ref NvaPublicationApi
  NvaPublishPublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publish-publication
      Handler: no.unit.nva.publication.publish.PublishPublicationHandler::handleRequest
      Layers:
        - !Ref NvaPublicationCommonsLayer
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref PublicationsTableName
          BY_PUBLISHER_INDEX_NAME: !Ref PublicationsByOwnerIndexName
          BY_PUBLISHED_PUBLICATIONS_INDEX_NAME: !Ref PublishedPublicationsIndexName
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PublicationsTableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{identifier}/publish
            Method: put
            RestApiId: !Ref NvaPublicationApi
  NvaListPublicationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: list-publications
      Handler: no.unit.nva.publication.query.ListPublishedPublicationsHandler::handleRequest
      Layers:
        - !Ref NvaPublicationCommonsLayer
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref PublicationsTableName
          BY_PUBLISHER_INDEX_NAME: !Ref PublicationsByOwnerIndexName
          BY_PUBLISHED_PUBLICATIONS_INDEX_NAME: !Ref PublishedPublicationsIndexName
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PublicationsTableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RequestParameters:
              - method.request.querystring.pagesize
            RestApiId: !Ref NvaPublicationApi

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaDefaults
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - sts:AssumeRole
                  - sts:TagSession
                Resource: "*"
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:*
                  - lambda:InvokeFunction
                Resource: "*"

  FailQueue:
    Type: AWS::SQS::Queue
    Properties:
      MaximumMessageSize: 262144
      QueueName: !Ref FailureQueueName
  DynamoDbEventConducer:
    DependsOn:
    # - EventBus  ( FIX THIS )
      - FailQueue
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref NvaPublicationCommonsLayer
      CodeUri: publication-event-dtopublicationdoi-producer
      Handler: no.unit.nva.doi.event.producer.DynamoDbEventConducer::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !Ref EventBusName
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          BASE_PATH: !Ref CustomDomainBasePath
          DOMAIN_NAME: !Ref CustomDomain
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern: { "detail-type": [ "dynamodb-stream-event" ] }
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Sub arn:aws:events:eu-west-1:${AWS::AccountId}:event-bus/default
          OnFailure:
            Type: SQS
            Destination: !GetAtt FailQueue.Arn
  DynamodbEventEventBridgeHandler:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref NvaPublicationCommonsLayer
      CodeUri: publication-event-emitter
      # DynamodbStream -> Publish DynamodbStreamEvent to EventBridge ->  DynamodbEventConducer (reads DynamodbStreamEvent from Event Bridge) and creates PublicationDTOs and publishes again on Event Bridge.
      Handler: no.unit.nva.doi.lambda.DynamodbEventEventBridgeHandler::handleRequest
      MemorySize: 768
      Timeout: 360
      Runtime: java11
      Tracing: Active
      Environment:
        Variables:
          DLQ_URL: !Ref FanoutDLQ
          MAX_ATTEMPT: !Ref EventBridgeMaxAttempt
          EVENT_BUS_NAME: !Ref EventBusName
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt FanoutDLQ.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: '*'
      Events:
        FanoutSource:
          Type: DynamoDB
          Properties:
            Stream: !Ref DynamoDBStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            Enabled: true
  FanoutDLQ:
    Type: "AWS::SQS::Queue"

  NvaPublicationBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Ref CustomDomain
      RestApiId: !Ref NvaPublicationApi
      Stage: !Ref NvaPublicationApi.Stage

Outputs:
  FanoutLambdaName:
    Description: "Fanout Lambda Function Name"
    Value: !Ref DynamodbEventEventBridgeHandler
  FanoutUrl:
    Description: "FanoutUrl SQS DLQ URL"
    Value: !Ref FanoutDLQ