AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  SAM Template for NVA Publication Service

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaPublicationApi
    Description: NVA publication API
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: [ '${CODEBUILD_RESOLVED_SOURCE_VERSION}', '${GIT_REPO}', '@${BUILD_TIMESTAMP}' ]

Globals:
  Function:
    Timeout: 20
    Architectures:
      - arm64
  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS,DELETE,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CustomDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: publication
  EventBusName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: EventBusName
  EventBusArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: EventBusArn
  NewNvaEventBusArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBusArn'
  NewNvaEventBusName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBusName'
  NewNvaEventsBucketsName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBucketName'
  ExpandedEntriesPersistenceBucketName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/PersistedEntriesBucketName'
  IdentityServiceInternalCommunicationSecretArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/UserServiceInternalApiKeyArn'
  MaxConcurrency:
    Type: Number
    Default: 100
    Description: Max number of provisioned hot instances for a lambda function
  MinConcurrency:
    Type: Number
    Default: 1
    MaxValue: 1
    MinValue: 1
    Description: Min number of provisioned hot instances for a lambda function
  EventBridgeMaxAttempt:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5
    Description: Max attempt to put events into AWS EventBridge Event Bus. Default is 1.
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Resources:

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  #===========================DynamoDB Table========================================================

  NvaResourcesTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete # DeletionPolicy should be added on main branch stacks through use of stack policy
    Properties:
      TableName: !Sub nva-resources-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK0
          AttributeType: S
        - AttributeName: SK0
          AttributeType: S
        - AttributeName: PK1
          AttributeType: S
        - AttributeName: SK1
          AttributeType: S
        - AttributeName: PK2
          AttributeType: S
        - AttributeName: SK2
          AttributeType: S
        - AttributeName: PK3
          AttributeType: S
        - AttributeName: SK3
          AttributeType: S
        - AttributeName: PK4
          AttributeType: S
        - AttributeName: SK4
          AttributeType: S
      KeySchema:
        - AttributeName: PK0
          KeyType: HASH
        - AttributeName: SK0
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ByTypeCustomerStatus
          KeySchema:
            - AttributeName: PK1
              KeyType: HASH
            - AttributeName: SK1
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ByCustomerResource
          KeySchema:
            - AttributeName: PK2
              KeyType: HASH
            - AttributeName: SK2
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ResourcesByIdentifier
          KeySchema:
            - AttributeName: PK3
              KeyType: HASH
            - AttributeName: SK3
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ResourceByCristinId
          KeySchema:
            - AttributeName: PK4
              KeyType: HASH
            - AttributeName: SK4
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  #===============================DLOQs===================================================================

  DynamodbEventFanoutStreamRecordsDLQ:
    Type: "AWS::SQS::Queue"
  UpdateDoiStatusDLQ:
    Type: "AWS::SQS::Queue"
  DeletePublicationEventProducerDlq:
    Type: "AWS::SQS::Queue"
  PublicationFanoutHandlerDLQ:
    Type: "AWS::SQS::Queue"
  DeleteDraftPublicationHandlerDLQ:
    Type: "AWS::SQS::Queue"
  DoiRequestEventProducerDLQ:
    Type: "AWS::SQS::Queue"
  ResourceExpansionHandlerDLQ:
    Type: "AWS::SQS::Queue"



  #==============================ROLES=======================================================================

  DeleteDraftPublicationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !Ref EventBusArn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt DeleteDraftPublicationHandlerDLQ.Arn

  UpdateDoiStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt UpdateDoiStatusDLQ.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

  DefaultLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DefaultLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
        - !Ref DeleteDraftPublicationLambdaRole
        - !Ref UpdateDoiStatusLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:InvokeFunction
            Resource: "*"

  DatabaseAccessLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DatabaseAccessLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
        - !Ref DeleteDraftPublicationLambdaRole
        - !Ref UpdateDoiStatusLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nva-resources-${AWS::StackName}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nva-resources-${AWS::StackName}/index/*

  S3AccessPermsisions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub S3AccessPermsisions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: "*"

  EventsLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub EventsLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - events:*
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
            Resource: "*"
  InternalAccessToIdentityServicePermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub InternalAccessToIdentityServicePermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:*
            Resource: "*"

  NvaPublicationApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml


  #================================ApiGateway handlers====================================================
  NvaCreatePublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-rest
      Handler: no.unit.nva.publication.create.CreatePublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
          ID_NAMESPACE: !Sub 'https://api.${CustomDomain}/${CustomDomainBasePath}'
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaPublicationApi

  NvaCreateDoiRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: doi-requests
      Handler: no.unit.nva.doirequest.create.CreateDoiRequestHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /doirequest
            Method: post
            RestApiId: !Ref NvaPublicationApi


  NvaFetchPublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-rest
      Handler: no.unit.nva.publication.fetch.FetchPublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
          ID_NAMESPACE: !Sub 'https://api.${CustomDomain}/${CustomDomainBasePath}'
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: get
            RestApiId: !Ref NvaPublicationApi

  NvaFetchPublicationFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${NvaFetchPublicationFunction}:live # You need to specify an alias or version here
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: NvaFetchPublicationFunctionAliaslive # This is your function logical ID + "Alias" + what you use for AutoPublishAlias

  NvaFetchPublicationFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: NvaFetchPublicationFunctionScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref NvaFetchPublicationFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70 # Any value between 0.1 and 0.9 can be used here
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  NvaUpdatePublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-rest
      Handler: no.unit.nva.publication.update.UpdatePublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
          ID_NAMESPACE: !Sub 'https://api.${CustomDomain}/${CustomDomainBasePath}'
      Role: !GetAtt LambdaRole.Arn
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: put
            RestApiId: !Ref NvaPublicationApi

  NvaDeletePublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-rest
      Handler: no.unit.nva.publication.delete.DeletePublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: delete
            RestApiId: !Ref NvaPublicationApi
  NvaPublicationsByOwnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-rest
      Handler: no.unit.nva.publication.fetch.PublicationsByOwnerHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /by-owner
            Method: get
            RestApiId: !Ref NvaPublicationApi

  ListDoiRequestsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: doi-requests
      Handler: no.unit.nva.doirequest.list.ListDoiRequestsHandler::handleRequest
      MemorySize: 768
      Timeout: 600
      Runtime: java11
      Tracing: Active
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /doirequest
            Method: get
            RestApiId: !Ref NvaPublicationApi

  UpdateDoiRequestHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: doi-requests
      Handler: no.unit.nva.doirequest.update.UpdateDoiRequestStatusHandler::handleRequest
      MemorySize: 768
      Timeout: 600
      Runtime: java11
      Tracing: Active
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref CustomDomain
          API_SCHEME: 'https'
          TABLE_NAME: !Ref NvaResourcesTable
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /update-doi-request/{publicationIdentifier}
            Method: post
            RestApiId: !Ref NvaPublicationApi

  NvaPublishPublicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-rest
      Handler: no.unit.nva.publication.update.PublishPublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
          TABLE_NAME: !Ref NvaResourcesTable
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{identifier}/publish
            Method: put
            RestApiId: !Ref NvaPublicationApi

  NvaCreateMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: messages
      Handler: no.unit.nva.publication.messages.CreateMessageHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /messages
            Method: post
            RestApiId: !Ref NvaPublicationApi

  NvaListMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: messages
      Handler: no.unit.nva.publication.messages.ListMessagesHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /messages
            Method: get
            RestApiId: !Ref NvaPublicationApi


  #==========================Event Lambda functions====================================================

  DeletePublicationEventProducer:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-draft-publication
      Handler: no.unit.nva.publication.delete.DeletePublicationEventProducerHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Role: !GetAtt LambdaRole.Arn
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail:
                responsePayload:
                  type:
                    - publication.update
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt DeletePublicationEventProducerDlq.Arn

  DoiRequestEventProducer:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-event-handlers
      Handler: no.unit.nva.publication.events.handlers.doirequests.DoiRequestEventProducer::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !Ref EventBusName
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          BASE_PATH: !Ref CustomDomainBasePath
          DOMAIN_NAME: !Ref CustomDomain
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail-type: [ "Lambda Function Invocation Result - Success" ] #Lambda destinations detail-type
              detail:
                responsePayload:
                  type: [ "doirequest.update" ]
                  newPublication:
                    doiRequest:
                      type: [ { "exists": true } ] # "exists" works only in leaf nodes.
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt DoiRequestEventProducerDLQ.Arn
  ResourceExpansionHandler:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-event-handlers
      Handler: no.unit.nva.publication.events.handlers.expandresources.ExpandResourcesHandler::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENTS_BUCKET: !Ref NewNvaEventsBucketsName
          HANDLER_EVENTS_FOLDER: 'resource-updates-events'
          IDENTITY_SERVICE_SECRET_NAME: 'IdentityServiceSecret-' #TODO update when secret name is updated
          IDENTITY_SERVICE_SECRET_KEY: 'IdentityServiceSecretKey'
          API_SCHEME: 'https'
          API_HOST: !Sub 'api.${CustomDomain}'
          ID_NAMESPACE: !Sub 'https://api.${CustomDomain}/${CustomDomainBasePath}'
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail-type: [ "Lambda Function Invocation Result - Success" ] #Lambda destinations detail-type
              detail:
                responsePayload:
                  type: [ "publication.update", "message.update", "doirequest.update" ]
                  newData:
                    type: [ { "exists": true } ] # "exists" works only in leaf nodes.
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref NewNvaEventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt ResourceExpansionHandlerDLQ.Arn
  ExpandedResourcesPersistenceHandler:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-event-handlers
      Handler: no.unit.nva.publication.events.handlers.expandresources.ExpandedResourcePersistenceHandler::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENTS_BUCKET: !Ref NewNvaEventsBucketsName
          HANDLER_EVENTS_FOLDER: 'resource-updates-events'
          IDENTITY_SERVICE_SECRET_NAME: 'IdentityServiceSecret-' #TODO update when secret name is updated
          IDENTITY_SERVICE_SECRET_KEY: 'IdentityServiceSecretKey'
          API_SCHEME: 'https'
          API_HOST: !Sub 'api.${CustomDomain}'
          ID_NAMESPACE: !Sub 'https://api.${CustomDomain}/${CustomDomainBasePath}'
          PERSISTED_ENTRIES_BUCKET: !Ref ExpandedEntriesPersistenceBucketName
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref NewNvaEventBusName
            Pattern:
              detail-type: [ "Lambda Function Invocation Result - Success" ] #Lambda destinations detail-type
              detail:
                responsePayload:
                  type: ["EventPayload"]
                  eventType: [ "resources.entry.update" ]
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref NewNvaEventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt ResourceExpansionHandlerDLQ.Arn

  PublicationFanoutHandler:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-event-handlers
      Handler: no.unit.nva.publication.events.handlers.fanout.PublicationFanoutHandler::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENTS_BUCKET: !Ref NewNvaEventsBucketsName
          HANDLER_EVENTS_FOLDER: "not used"
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern: {
              "detail-type": [ "dynamodb-stream-event" ],
              "resources": [
                !GetAtt NvaResourcesTable.StreamArn
              ]
            }
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt PublicationFanoutHandlerDLQ.Arn


  DeleteDraftPublicationHandler:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-draft-publication
      Handler: no.unit.nva.publication.delete.DeleteDraftPublicationHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Role: !GetAtt DeleteDraftPublicationLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail:
                responsePayload:
                  type:
                    - delete.publication
                  hasDoi:
                    - false
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt DeleteDraftPublicationHandlerDLQ.Arn


  DynamodbEventFanoutStreamRecordsEventBridgeHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publication-event-handlers
      # DynamodbStream -> Publish DynamodbEvent to EventBridge
      Handler: no.unit.nva.publication.events.handlers.dynamodbstream.DynamodbEventFanoutStreamRecordsEventBridgeHandler::handleRequest
      MemorySize: 768
      Timeout: 360
      Runtime: java11
      Tracing: Active
      Environment:
        Variables:
          DLQ_URL: !Ref DynamodbEventFanoutStreamRecordsDLQ
          MAX_ATTEMPT: !Ref EventBridgeMaxAttempt
          EVENT_BUS_NAME: !Ref EventBusName
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DynamodbEventFanoutStreamRecordsDLQ.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: '*'
      Events:
        FanoutSource:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt NvaResourcesTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            Enabled: true


  UpdateDoiStatusHandlerFunction:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update-doi-status
      Handler: no.unit.nva.doi.handler.UpdateDoiStatusHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Role: !GetAtt UpdateDoiStatusLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NvaResourcesTable
          API_SCHEME: https
          API_HOST: !Ref CustomDomain
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail-type:
                #Standard detail-type for successful invocation of Lambda function using Lambda destinations
                - "Lambda Function Invocation Result - Success"
              detail:
                responsePayload:
                  type:
                    - doi.updateDoiStatus
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt UpdateDoiStatusDLQ.Arn


  CristinEntriesEventEmitter:
    DependsOn:
      - ImportRequestsEventBus
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3-import-commons
      Handler: no.unit.nva.publication.s3imports.FileEntriesEventEmitter::handleRequest
      Runtime: java11
      MemorySize: 2048
      Timeout: 600 # 10 min timeout
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          TABLE_NAME: !Ref NvaResourcesTable
          EVENT_BUS: !GetAtt ImportRequestsEventBus.Name
          BATCH_EMISSION_INTERVAL_MILLIS: 700
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt ImportRequestsEventBus.Name
            Pattern:
              detail-type:
                - import.filename-event

  CristinEntriesEventConsumer:
    DependsOn:
      - ImportRequestsEventBus
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cristin-import
      Handler: no.unit.nva.cristin.lambda.CristinEntryEventConsumer::handleRequest
      Runtime: java11
      MemorySize: 512
      Timeout: 30 #  30 sec timeout
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          TABLE_NAME: !Ref NvaResourcesTable
          BATCH_EMISSION_INTERVAL_MILLIS: 0
          DOMAIN_NAME: !Ref CustomDomain
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt ImportRequestsEventBus.Name
            Pattern:
              detail-type:
                - import.cristin.entry-event


  #==========================Manually triggered functions=============================================

  ImportCristinDataFromS3:
    DependsOn:
      - ImportRequestsEventBus
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3-import-commons
      Handler: no.unit.nva.publication.s3imports.FilenameEventEmitter::handleRequest
      Runtime: java11
      MemorySize: 512
      Timeout: 900 # 15 min timeout
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
          TABLE_NAME: !Ref NvaResourcesTable
          EVENT_BUS: !GetAtt ImportRequestsEventBus.Name
          IMPORT_EVENT_TYPE: import.cristin.entry-event
          BATCH_EMISSION_INTERVAL_MILLIS: 700


  #============================ Deploy API ============================================================================#
  # This solves the problem described here:
  # https://stackoverflow.com/questions/41423439/cloudformation-doesnt-deploy-to-api-gateway-stages-on-update
  #====================================================================================================================#

  ApiGatewayCreateDeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ApiGatewayAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${NvaPublicationApi}/deployments'

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
  ApiGatewayCreateDeploymentLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt ApiGatewayCreateDeploymentLambdaRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import json, boto3
          import cfnresponse
          client = boto3.client('apigateway')

          def lambda_handler(event, context):
            responseData = {}
            responseStatus = cfnresponse.SUCCESS
            if event['RequestType'] == 'Update':
              try:
                properties = event['ResourceProperties']
                response = client.create_deployment(
                  restApiId=properties['RestApiId'],
                  stageName=properties['StageName'],
                  description='Deployed from Custom Resource'
                )
              except:
                responseStatus = cfnresponse.FAILED

            cfnresponse.send(event, context, responseStatus, responseData)

  ApiGatewayCreateDeploymentCustomResource:
    DependsOn: NvaPublicationApi
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ApiGatewayCreateDeploymentLambda.Arn
      RestApiId: !Ref NvaPublicationApi
      StageName: !Ref NvaPublicationApi.Stage
      Timestamp: '${BUILD_TIMESTAMP}'
      AuthorizerArn: !Ref CognitoAuthorizerArn

  #=============================Event Buses =============================================================
  ImportRequestsEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join [ '',[ 'import-requests-event-bus',!Ref Suffix ] ]

  #===========================BasePathMappings========================================================

  NvaPublicationBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref NvaPublicationApi
      Stage: !Ref NvaPublicationApi.Stage
