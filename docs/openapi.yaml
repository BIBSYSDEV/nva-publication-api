openapi: 3.0.3
info:
  title: NVA Publication API
  version: 1.0.0
paths:
  /:
    post:
      summary: Create Publication
      tags:
        - external
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publication'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert'
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreatePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /{publicationIdentifier}:
    get:
      summary: Fetch Publication by Identifier
      tags:
        - external
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to fetch.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchPublicationFunction.Arn}:live/invocations
        responses:
          301:
            statusCode: "301"
            responseParameters:
              method.response.header.Location: "integration.response.body.redirect.url"
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Publication'
            application/vnd.datacite.datacite+xml:
              schema:
                $ref: '#/components/schemas/PublicationDataCiteXml'
            application/vnd.schemaorg.ld+json:
              schema:
                $ref: '#/components/schemas/PublicationSchemaOrg'
        '301':
          description: MOVED PERMANENTLY
          headers:
            Location:
              description: URI to the new location
              schema:
                type: string
                format: URI
            Cache-Control:
              description: Cache-Control header
              schema:
                type: string
        '410':
          description: Permanently gone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update Publication for Identifier
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert'
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Publication'
                - $ref: '#/components/schemas/DeletePublicationRequest'
                - $ref: '#/components/schemas/UnpublishPublicationRequest'
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to update.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdatePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      summary: Delete Publication for Identifier
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert' ]
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to delete.
        - in: query
          name: duplicate
          description: 'UUID to duplicate NVA publication'
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaDeletePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
  /by-owner:
    get:
      summary: Get Publications by Owner
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-read'
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublicationsByOwnerFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publication'

  /{publicationIdentifier}/doi:
    post:
      summary: Reserves doi for draft publication
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          example:
            doi: '10.3848/135f2cf8-b816-11ed-afa1-0242ac120002'
          description: UUID identifier of the Publication to fetch.
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReserveDoiHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK, doi is already reserved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doi'
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doi'
        '401':
          description: Unauthorized, no config found for users customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: Publication not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '405':
          description: Operation is not allowed, publication is not a draft
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '502':
          description: Bad response from Datacite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"


  /{publicationIdentifier}/ticket:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
    post:
      description: Create a new ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTicketRequest"
      responses:
        201:
          description: ACCEPTED
          headers:
            Location:
              description: URI to created ticket
              schema:
                type: string
                format: URI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTicketFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY

  /{publicationIdentifier}/ticket/{ticketIdentifier}:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
    put:
      description: Update existing ticket
      requestBody:
        description: A Ticket Object containing the status, assignee and viewedStatus
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketRequest'
      responses:
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTicketRequest"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        502:
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTicketHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    delete:
      description: Delete existing ticket
      responses:
        200:
          description: Ok
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        502:
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTicketHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    get:
      description: Get an existing ticket
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        502:
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTicketFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/ticket/{ticketIdentifier}/message:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
    post:
      description: Add message to ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: "Created"
          headers:
            "Location":
              description: The URI of the created message
              schema:
                type: string
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateMessageFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/ticket/{ticketIdentifier}/message/{messageIdentifier}:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
      - in: path
        name: messageIdentifier
        schema:
          type: string
        required: true
    delete:
      description: Deleting message
      responses:
        '200':
          description: "Ok"
          headers:
            "Location":
              description: Message has been successfully deleted
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteMessageHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY

  /tickets:
    get:
      description: List tickets for user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketCollection"

      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTicketsHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/tickets:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
    get:
      description: List tickets for publication
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketCollection"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTicketsForPublicationHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY

  /context:
    get:
      summary: Fetch Publication context
      tags:
        - external
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchPublicationContextFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicationContext"
            application/ld+json:
              schema:
                $ref: "#/components/schemas/PublicationContext"
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /import-candidate/{importCandidateIdentifier}:
    get:
      summary: Fetch Import candidate by Identifier
      parameters:
        - in: path
          name: importCandidateIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the import candidate to fetch.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchImportCandidateFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCandidate'
        '404':
          description: Import candidate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      summary: Create Publication from Import candidate
      parameters:
        - in: path
          name: importCandidateIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the import candidate to publish.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCandidate'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePublicationFromImportCandidateFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      summary: Update import status
      parameters:
        - in: path
          name: importCandidateIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the import candidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportStatus'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateImportStatusHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCandidate'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /import-candidate/{importCandidateIdentifier}/file/{fileIdentifier}:
    get:
      summary: Fetch pre-signed url for import candidate file
      parameters:
        - in: path
          name: importCandidateIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the import candidate.
        - in: path
          name: fileIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the file to fetch.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImportCandidatePresignedUrlHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrl'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

components:
  schemas:
    Publication:
      type: object
      description: Complete Publication entity
      properties:
        type:
          type: string
          enum: [ 'Publication' ]
          description: Type of the request
        abstract:
          type: string
          description: short abstract of content
        alternativeTitles:
          type: array
          description: short abstract of content
          items:
            type: string
        contributors:
          type: array
          description: List of contributing people
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        description:
          type: string
        doi:
          type: string
        id:
          type: string
        modifiedDate:
          type: string
          format: date
        owner:
          type: string
        publicationDate:
          type: object
          properties:
            day:
              type: string
            month:
              type: string
            type:
              type: string
            year:
              type: string
        publicationType:
          type: string
        publishedDate:
          type: string
          format: date
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        reference:
          type: object
          properties:
            doi:
              type: string
            publicationContext:
              type: object
              properties:
                level:
                  type: string
                linkedContext:
                  type: string
                onlineIssn:
                  type: string
                openAccess:
                  type: boolean
                peerReviewed:
                  type: boolean
                printIssn:
                  type: string
                publisher:
                  type: string
                seriesTitle:
                  type: string
                title:
                  type: string
                type:
                  type: string
                url:
                  type: string
            publicationInstance:
              type: object
              properties:
                articleNumber:
                  type: string
                issue:
                  type: string
                pages:
                  type: object
                  properties:
                    begin:
                      type: string
                    end:
                      type: string
                    illustrated:
                      type: boolean
                    pages:
                      type: string
                    type:
                      type: string
                peerReviewed:
                  type: boolean
                textbookContent:
                  type: boolean
                type:
                  type: string
                volume:
                  type: string
            type:
              type: string
        tags:
          type: array
          items:
            type: string
        title:
          type: string
    DeletePublicationRequest:
      type: object
      description: Delete publication request
      properties:
        type:
          type: string
          enum: [ 'DeletePublicationRequest' ]
          description: Type of the request
    UnpublishPublicationRequest:
      type: object
      description: Unpublish publication request
      properties:
        type:
          type: string
          enum: [ 'UnpublishPublicationRequest' ]
          description: Type of the request
        duplicateOf:
          type: string
          description: Identifier of the publication the current publication is a duplicate of
        comment:
          type: string
          description: Reason for unpublishing
    ImportCandidate:
      type: object
      description: Complete Import candidate entity
      properties:
        abstract:
          type: string
          description: short abstract of content
        alternativeTitles:
          type: array
          description: short abstract of content
          items:
            type: string
        contributors:
          type: array
          description: List of contributing people
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        description:
          type: string
        doi:
          type: string
        id:
          type: string
        modifiedDate:
          type: string
          format: date
        owner:
          type: string
        publicationDate:
          type: object
          properties:
            day:
              type: string
            month:
              type: string
            type:
              type: string
            year:
              type: string
        publicationType:
          type: string
        publishedDate:
          type: string
          format: date
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        reference:
          type: object
          properties:
            doi:
              type: string
            publicationContext:
              type: object
              properties:
                level:
                  type: string
                linkedContext:
                  type: string
                onlineIssn:
                  type: string
                openAccess:
                  type: boolean
                peerReviewed:
                  type: boolean
                printIssn:
                  type: string
                publisher:
                  type: string
                seriesTitle:
                  type: string
                title:
                  type: string
                type:
                  type: string
                url:
                  type: string
            publicationInstance:
              type: object
              properties:
                articleNumber:
                  type: string
                issue:
                  type: string
                pages:
                  type: object
                  properties:
                    begin:
                      type: string
                    end:
                      type: string
                    illustrated:
                      type: boolean
                    pages:
                      type: string
                    type:
                      type: string
                peerReviewed:
                  type: boolean
                textbookContent:
                  type: boolean
                type:
                  type: string
                volume:
                  type: string
            type:
              type: string
        tags:
          type: array
          items:
            type: string
        title:
          type: string
        importStatus:
          type: object
          properties:
            candidateStatus:
              type: string
              enum:
                - IMPORTED
                - NOT_IMPORTED
                - NOT_APPLICABLE
            setBy:
              type: string
            modifiedDate:
              type: string
            nvaPublicationId:
              type: string
            comment:
              type: string
    ImportStatus:
      type: object
      properties:
        candidateStatus:
          type: string
          enum:
            - IMPORTED
            - NOT_IMPORTED
            - NOT_APPLICABLE
        nvaPublicationId:
          type: string
        comment:
          type: string
    PublicationDataCiteXml:
      type: object
    PublicationSchemaOrg:
      type: object
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
    Message:
      description: Message
      type: object
      properties:
        sender:
          type: string
        owner:
          type: string
        date:
          type: string
    NewTicketRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
    Doi:
      type: object
      properties:
        doi:
          type: string
    UpdateTicketRequest:
      description: Only few fields of Ticket are exposed for update
      type: object
      properties:
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Closed
        viewStatus:
          type: string
          enum:
            - Read
            - Unread
        assignee:
          type: string
          description: Username to assign or empty string to deallocate
    Ticket:
      type: object
      properties:
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
        viewedBy:
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Closed
    TicketCollection:
      type: object
      properties:
        type:
          type: string
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/Ticket"
    PublicationContext:
      type: object
      description: Publication context
    PresignedUrl:
      description: PresignedUrl response
      type: object
      properties:
        fileIdentifier:
          type: string
        uri:
          type: string
        expires:
          type: string
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref: CognitoAuthorizerArn
          - Ref: ExternalCognitoAuthorizerArn