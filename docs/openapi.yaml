openapi: 3.0.3
info:
  title: NVA Publication API
  version: 1.0.0
paths:
  /:
    post:
      summary: Create Publication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publication'
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend', 'aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreatePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /{publicationIdentifier}:
    get:
      summary: Fetch Publication by Identifier

      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to fetch.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchPublicationFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
    put:
      summary: Update Publication for Identifier
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publication'
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to update.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdatePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
    delete:
      summary: Delete Publication for Identifier
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to delete.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaDeletePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
  /by-owner:
    get:
      summary: Get Publications by Owner
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublicationsByOwnerFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publication'

  /{publicationIdentifier}/publish:
    put:
      summary: Publish Publication
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
          required: true
          description: UUID identifier of the Publication to publish.
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublishPublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '202':
          description: Publishing in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationPublishStatus'
        '204':
          description: Publish completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationPublishStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /doirequest:
    get:
      summary: Find DOI Requests By Role
      parameters:
        - in: query
          name: role
          description: The role used to find DOI requests for.
          schema:
            type: string
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListDoiRequestsHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    post:
      summary: Create a DOI request
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDoiRequest"
      responses:
        '201':
          description: "Created"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateDoiRequestFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /update-doi-request/{publicationIdentifier}:
    post:
      summary: Initiate a Update DOI Request process
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDoiRequest'
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
          description: Publication Identifier
          required: true
      responses:
        '202':
          description: "Accepted"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateDoiRequestHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /messages:
    post:
      summary: Create a message.
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '201':
          description: "Created"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateMessageFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    get:
      summary: Get messages for a user.
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMessages'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaListMessagesFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /messages/{messageIdentifier}:
    parameters:
      - in: path
        name: messageIdentifier
        schema:
          type: string
        required: true
        description: Identifier for the requested message
    get:
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetMessageFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/support-case:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
        description: Identifier of the publication related to the publishing request
    post:
      summary: Create an publishing request for publication
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      requestBody:
        description: 'Request to publish a draft Publication. Only type is required.'
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PublishingRequestCase'
            examples:
              request:
                value: { "type": "PublishingRequestCase" }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishingRequestCase'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePublishingRequestFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/support-case/{supportCaseIdentifier}:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
      - in: path
        name: supportCaseIdentifier
        schema:
          type: string
        required: true
        description: Identifier of the publication related to the publishing request
    get:
      summary: Get the support case for a publication
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishingRequestCase'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPublishingRequestFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    put:
      summary: Update status for a support case for a publication
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishingRequestCase'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishingRequestCase'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePublishingRequestFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY

components:
  schemas:
    Publication:
      type: object
    PublicationPublishStatus:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
    Problem:
      type: object
      properties:
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
    CreateDoiRequest:
      type: object
      properties:
        identifier:
          type: string
          description: The resource identifier
        message:
          type: string
          description: Optional message to Curator
    UpdateDoiRequest:
      type: object
      properties:
        doiRequestStatus:
          $ref: '#/components/schemas/DoiRequestStatus'
      description: Initiate a Update DOI request process
    DoiRequestStatus:
      description: Enum values for valid doiRequestStatus
      type: string
      enum:
        - REQUESTED
        - APPROVED
        - REJECTED
    Message:
      description: Message
      type: object
      properties:
        sender:
          type: string
        owner:
          type: string
        date:
          type: string
        messageType:
          type: string
          enum:
            - DoiRequest
            - Support
    ResourceMessages:
      description: Message list for a Publication
      type: object
      properties:
        publication:
          $ref: '#/components/schemas/Publication'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    CreateMessageRequest:
      type: object
      properties:
        publicationIdentifier:
          type: string
        message:
          type: string
        messageType:
          type: string
          enum:
            - DoiRequest
            - Support
    PublishingRequestCase:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
          format: uri
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref:
              CognitoAuthorizerArn
