openapi: 3.0.3
info:
  title: NVA Publication API
  version: 1.0.0
paths:
  /:
    post:
      operationId: createPublication
      summary: Create Publication
      tags:
        - external
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publication'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert'
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreatePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /{publicationIdentifier}:
    get:
      operationId: fetchPublicationByIdentifier
      summary: Fetch Publication by Identifier
      tags:
        - external
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
          required: true
          style: simple
          explode: false
          description: UUID identifier of the Publication to fetch.
        - in: query
          name: doNotRedirect
          schema:
            type: boolean
          style: form
          explode: false
          description: If fetching a deleted / unpublished publication, the response code will be 410, instead of 301. A non deleted / non-unpublished will respond as if the query param was not set.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchPublicationFunction.Arn}:live/invocations
        responses:
          301:
            statusCode: "301"
            responseParameters:
              method.response.header.Location: "integration.response.body.redirect.url"
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationResponse'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PublicationResponse'
            application/vnd.datacite.datacite+xml:
              schema:
                $ref: '#/components/schemas/PublicationDataCiteXml'
            application/vnd.schemaorg.ld+json:
              schema:
                $ref: '#/components/schemas/PublicationSchemaOrg'
        '301':
          description: MOVED PERMANENTLY
          headers:
            Location:
              description: URI to the new location
              schema:
                type: string
                format: URI
            Cache-Control:
              description: Cache-Control header
              schema:
                type: string
        '410':
          description: Permanently gone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      operationId: updatePublication
      summary: Update Publication for Identifier
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert'
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Publication'
                - $ref: '#/components/schemas/DeletePublicationRequest'
                - $ref: '#/components/schemas/UnpublishPublicationRequest'
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
          required: true
          style: simple
          explode: false
          description: UUID identifier of the Publication to update.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdatePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationResponse'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      operationId: deletePublication
      summary: Delete Publication for Identifier
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert' ]
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
          required: true
          style: simple
          explode: false
          description: UUID identifier of the Publication to delete.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaDeletePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
  /by-owner:
    get:
      operationId: listPublicationsByOwner
      summary: Get Publications by Owner
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-read'
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublicationsByOwnerFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publication'

  /{publicationIdentifier}/doi:
    post:
      operationId: reserveDoiForDraftPublication
      summary: Reserves doi for draft publication
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
          required: true
          example:
            doi: '10.3848/135f2cf8-b816-11ed-afa1-0242ac120002'
          style: simple
          explode: false
          description: UUID identifier of the Publication to fetch.
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReserveDoiHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK, doi is already reserved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doi'
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doi'
        '401':
          description: Unauthorized, no config found for users customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: Publication not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '405':
          description: Operation is not allowed, publication is not a draft
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '502':
          description: Bad response from Datacite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"


  /{publicationIdentifier}/ticket:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the publication
    post:
      operationId: createTicketForPublication
      description: Create a new ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTicketRequest"
      responses:
        201:
          description: ACCEPTED
          headers:
            Location:
              description: URI to created ticket
              schema:
                type: string
                format: URI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTicketFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY

  /{publicationIdentifier}/ticket/{ticketIdentifier}:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the publication
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the ticket
    put:
      operationId: updateTicketForPublication
      description: Update existing ticket
      requestBody:
        description: A Ticket Object containing the status, assignee and viewedStatus
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketRequest'
      responses:
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTicketRequest"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        502:
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTicketHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    delete:
      operationId: deleteTicketForPublication
      description: Delete existing ticket
      responses:
        200:
          description: Ok
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        502:
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTicketHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    get:
      operationId: fetchTicketForPublication
      description: Get an existing ticket
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        502:
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTicketFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/ticket/{ticketIdentifier}/message:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the publication
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the ticket
    post:
      operationId: addMessageToTicket
      description: Add message to ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: "Created"
          headers:
            "Location":
              description: The URI of the created message
              schema:
                type: string
                format: uri
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateMessageFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/ticket/{ticketIdentifier}/message/{messageIdentifier}:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the publication
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the ticket
      - in: path
        name: messageIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the message
    delete:
      operationId: deleteMessageForTicket
      description: Deleting message
      responses:
        '200':
          description: "Ok"
          headers:
            "Location":
              description: Message has been successfully deleted
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteMessageHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/filelink/{fileIdentifier}:
    get:
      summary: Public pre signed download link for publication file
      description: Returns an S3 pre signed and temporal download URL to a publication file
      operationId: getPresignDownloadUri
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DownloadPublicationFileFunction.Arn}/invocations
        httpMethod: POST
        type: AWS_PROXY
      parameters:
        - in: path
          name: publicationIdentifier
          description: UUID identifier of the Publication.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: fileIdentifier
          description: UUID identifier of the Publication File.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Ok"
          headers:
            "Location":
              description: Message has been successfully deleted
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /file/{fileIdentifier}:
    get:
      summary: Resolves shortened URI to original presigned URI
      description: Returns 301 if successful with location header set to the original presigned URI
      operationId: resolveDownloadUriFromIdentifier
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResolveShortenedUrlHandler.Arn}/invocations
        httpMethod: POST
        type: AWS_PROXY
      parameters:
        - in: path
          name: fileIdentifier
          description: UUID identifier of the shortened URI
          required: true
          schema:
            type: string
            format: uuid
      responses:
        301:
          description: Permanently moved
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The URI that this redirects to
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /tickets:
    get:
      operationId: listTicketsForUser
      description: List tickets for user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketCollection"

      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTicketsHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/tickets:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
        style: simple
        explode: false
        description: UUID of the ticket
    get:
      operationId: listTicketsForPublication
      description: List tickets for publication
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketCollection"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTicketsForPublicationHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY

  /context:
    get:
      operationId: fetchPublicationContext
      summary: Fetch Publication context
      tags:
        - external
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchPublicationContextFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicationContext"
            application/ld+json:
              schema:
                $ref: "#/components/schemas/PublicationContext"
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /import-candidate/{importCandidateIdentifier}:
    get:
      operationId: fetchImportCandidateByIdentifier
      summary: Fetch Import candidate by Identifier
      parameters:
        - in: path
          name: importCandidateIdentifier
          schema:
            type: string
          required: true
          style: simple
          explode: false
          description: UUID identifier of the import candidate to fetch.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchImportCandidateFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCandidate'
        '404':
          description: Import candidate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      operationId: createPublicationFromImportCandidate
      summary: Create Publication from Import candidate
      parameters:
        - in: path
          name: importCandidateIdentifier
          schema:
            type: string
          required: true
          style: simple
          explode: false
          description: UUID identifier of the import candidate to publish.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCandidate'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePublicationFromImportCandidateFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      operationId: updateImportCandidate
      summary: Update import status
      parameters:
        - in: path
          name: importCandidateIdentifier
          schema:
            type: string
          required: true
          style: simple
          explode: false
          description: UUID identifier of the import candidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportStatus'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateImportStatusHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCandidate'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /import-candidate/{importCandidateIdentifier}/file/{fileIdentifier}:
    get:
      operationId: fetchPreSignedUrlForImportCandidateFile
      summary: Fetch pre-signed url for import candidate file
      parameters:
        - in: path
          name: importCandidateIdentifier
          schema:
            type: string
          required: true
          style: simple
          explode: false
          description: Identifier of the import candidate.
        - in: path
          name: fileIdentifier
          schema:
            type: string
          required: true
          style: simple
          explode: false
          description: Identifier of the file to fetch.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImportCandidatePresignedUrlHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrl'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

components:
  schemas:
    PublicationResponse:
      allOf:
      - $ref: '#/components/schemas/Publication'
      - type: object
        properties:
          allowedOperations:
            type: array
            description: >
              Returns a list of allowed operations for the current user on the publication if a bearer token is provided. Otherwise the list will be empty
                * update - Can edit the publication. Accessed though PUT  
                * delete - Permanently delete. Accessed though DELETE  
                * terminate - Can mark publication as deleted and remove associated files. Accessed though PUT
                * unpublish - Can change published publication status to unpublished. Accessed though PUT
                * ticket/publish - Allowed to approve a PublishingRequest ticket
            items:
              type: string
              enum: ["update", "delete", "terminate", "unpublish", "ticket/publish"]
    DeletePublicationRequest:
      type: object
      description: Delete publication request
      required:
        - type
      properties:
        type:
          type: string
          enum: [ 'DeletePublicationRequest' ]
          description: Type of the request
    UnpublishPublicationRequest:
      type: object
      description: Unpublish publication request
      required:
        - type
        - comment
      properties:
        type:
          type: string
          enum: [ 'UnpublishPublicationRequest' ]
          description: Type of the request
        duplicateOf:
          type: string
          format: uri
          description: The URI representing a publication of which the current one is a duplicate of.
        comment:
          type: string
          description: Reason for unpublishing
    ImportCandidate:
      type: object
      description: Complete Import candidate entity
      properties:
        abstract:
          type: string
          description: short abstract of content
        alternativeTitles:
          type: array
          description: short abstract of content
          items:
            type: string
        contributors:
          type: array
          description: List of contributing people
          items:
            type: object
            properties:
              id:
                type: string
                format: uri
              name:
                type: string
        description:
          type: string
        doi:
          type: string
          format: uri
        id:
          type: string
        modifiedDate:
          type: string
          format: date
        owner:
          type: string
        publicationDate:
          type: object
          properties:
            day:
              type: string
            month:
              type: string
            type:
              type: string
            year:
              type: string
        publicationType:
          type: string
        publishedDate:
          type: string
          format: date
        publisher:
          type: object
          properties:
            id:
              type: string
              format: uri
            name:
              type: string
        reference:
          type: object
          properties:
            doi:
              type: string
              format: uri
            publicationContext:
              type: object
              properties:
                level:
                  type: string
                linkedContext:
                  type: string
                onlineIssn:
                  type: string
                openAccess:
                  type: boolean
                peerReviewed:
                  type: boolean
                printIssn:
                  type: string
                publisher:
                  type: string
                seriesTitle:
                  type: string
                title:
                  type: string
                type:
                  type: string
                url:
                  type: string
            publicationInstance:
              type: object
              properties:
                articleNumber:
                  type: string
                issue:
                  type: string
                pages:
                  type: object
                  properties:
                    begin:
                      type: string
                    end:
                      type: string
                    illustrated:
                      type: boolean
                    pages:
                      type: string
                    type:
                      type: string
                peerReviewed:
                  type: boolean
                textbookContent:
                  type: boolean
                type:
                  type: string
                volume:
                  type: string
            type:
              type: string
        tags:
          type: array
          items:
            type: string
        title:
          type: string
        importStatus:
          type: object
          properties:
            candidateStatus:
              type: string
              enum:
                - IMPORTED
                - NOT_IMPORTED
                - NOT_APPLICABLE
            setBy:
              type: string
            modifiedDate:
              type: string
            nvaPublicationId:
              type: string
            comment:
              type: string
    ImportStatus:
      type: object
      properties:
        candidateStatus:
          type: string
          enum:
            - IMPORTED
            - NOT_IMPORTED
            - NOT_APPLICABLE
        nvaPublicationId:
          type: string
          format: uri
        comment:
          type: string
    PublicationDataCiteXml:
      type: object
    PublicationSchemaOrg:
      type: object
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
    Message:
      description: Message
      type: object
      properties:
        createdDate:
          type: string
          format: date
        id:
          type: string
          format: uri
          example: "https://api.<environment>.nva.aws.unit.no/publication/14d3030c-3b61-4070-b902-342f80e99364/ticket/8758ec62-5772-48ff-8856-38d3f3038383/message/a228ecf2-5442-49fd-2256-3d43f3f383ff"
        identifier:
          type: string
          example: "a228ecf2-5442-49fd-2256-3d43f3f383ff"
        owner:
          description: "Ticket owner"
          type: string
          example: "123@123.0.0.0"
        sender:
          type: string
          example: "123@123.0.0.0"
        status:
          type: string
          enum:
            - Active
            - Deleted
        text:
          type: string
          example: "Message value"
    NewTicketRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
    Doi:
      type: object
      properties:
        doi:
          type: string
          format: uri
    UpdateTicketRequest:
      description: Only few fields of Ticket are exposed for update
      type: object
      properties:
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Closed
        viewStatus:
          type: string
          enum:
            - Read
            - Unread
        assignee:
          type: string
          description: Username to assign or empty string to deallocate
    Ticket:
      type: object
      properties:
        assignee:
          type: string
          example: "123@123.0.0.0"
        createdDate:
          type: string
          format: date
        identifier:
          type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        modifiedDate:
          type: string
          format: date
        owner:
          type: string
          example: "123@123.0.0.0"
        ownerAffiliation:
          type: string
          format: uri
          example: "https://api.<environment>.nva.aws.unit.no/cristin/organization/123.0.0.0"
        publicationIdentifier:
          type: string
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Closed
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
        viewedBy:
          type: array
          items:
            type: string
            example: "123@123.0.0.0"
        finalizedBy:
          type: string
          example: "123@123.0.0.0"
        finalizedDate:
          type: string
          format: date
    TicketCollection:
      type: object
      properties:
        type:
          type: string
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/Ticket"
    PresignedUrl:
      description: PresignedUrl response
      type: object
      properties:
        fileIdentifier:
          type: string
        uri:
          type: string
          format: uri
        expires:
          type: string
#region content from "documentation/schema.yaml"
    AcademicArticle:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            type:
              type: string
    AcademicChapter:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    AcademicLiteratureReview:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            type:
              type: string
    AcademicMonograph:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    AdditionalIdentifier:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalIdentifierBase'
    AdditionalIdentifierBase:
      required:
        - type
      type: object
      properties:
        value:
          type: string
        sourceName:
          type: string
        type:
          type: string
    AdministrativeAgreement:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/File'
        - type: object
          properties:
            type:
              type: string
    Agent:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    Anthology:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            id:
              type: string
              format: uri
            type:
              type: string
    Approval:
      required:
        - type
      type: object
      properties:
        approvalDate:
          type: string
          format: date-time
        approvedBy:
          type: string
          enum:
            - REK
            - NARA
            - NMA
            - DIRHEALTH
        approvalStatus:
          type: string
          enum:
            - NOTAPPLIED
            - APPLIED
            - APPROVED
            - DECLINED
            - REJECTION
        applicationCode:
          type: string
        type:
          type: string
    Architecture:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/ArchitectureSubtype'
            description:
              type: string
            architectureOutput:
              type: array
              items:
                $ref: '#/components/schemas/ArchitectureOutput'
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    ArchitectureOutput:
      required:
        - type
      type: object
      properties:
        sequence:
          type: integer
          format: int32
        type:
          type: string
    ArchitectureSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - Building
            - PlanningProposal
            - LandscapeArchitecture
            - Interior
            - ArchitectureOther
        description:
          type: string
          writeOnly: true
    Artistic:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            type:
              type: string
    ArtisticDesign:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/ArtisticDesignSubtype'
            description:
              type: string
            venues:
              type: array
              items:
                $ref: '#/components/schemas/Venue'
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    ArtisticDesignSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - ClothingDesign
            - Exhibition
            - GraphicDesign
            - Illustration
            - InteractionDesign
            - InteriorDesign
            - LightDesign
            - ArtisticDesignOther
            - ProductDesign
            - ServiceDesign
            - WebDesign
        description:
          type: string
          writeOnly: true
    AssociatedArtifact:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    AssociatedArtifactList:
      type: array
      properties:
        empty:
          type: boolean
        first:
          $ref: '#/components/schemas/AssociatedArtifact'
        last:
          $ref: '#/components/schemas/AssociatedArtifact'
      items:
        $ref: '#/components/schemas/AssociatedArtifact'
    AssociatedLink:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/AssociatedArtifact'
        - type: object
          properties:
            id:
              type: string
              format: uri
            name:
              type: string
            description:
              type: string
            type:
              type: string
    AudioVisualPublication:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/MusicPerformanceManifestation'
        - type: object
          properties:
            mediaType:
              $ref: '#/components/schemas/MusicMediaSubtype'
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            catalogueNumber:
              type: string
            trackList:
              type: array
              items:
                $ref: '#/components/schemas/MusicTrack'
            isrc:
              $ref: '#/components/schemas/Isrc'
            type:
              type: string
    Award:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/ArchitectureOutput'
        - type: object
          properties:
            name:
              type: string
            organizer:
              type: string
            date:
              $ref: '#/components/schemas/Instant'
            ranking:
              type: integer
              format: int32
            otherInformation:
              type: string
            type:
              type: string
    Book:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            series:
              $ref: '#/components/schemas/BookSeries'
            seriesTitle:
              type: string
              writeOnly: true
            seriesNumber:
              type: string
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            isbnList:
              type: array
              items:
                type: string
            revision:
              type: string
              enum:
                - Revised
                - Unrevised
            additionalIdentifiers:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/AdditionalIdentifier'
            type:
              type: string
    BookAnthology:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    BookSeries:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    Broadcast:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/MovingPictureOutput'
        - type: object
          properties:
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            date:
              $ref: '#/components/schemas/Instant'
            type:
              type: string
    CaseReport:
      required:
        - Type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            Type:
              type: string
    ChapterConferenceAbstract:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    ChapterInReport:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    CinematicRelease:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/MovingPictureOutput'
        - type: object
          properties:
            place:
              $ref: '#/components/schemas/UnconfirmedPlace'
            date:
              $ref: '#/components/schemas/Instant'
            type:
              type: string
    Competition:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/ArchitectureOutput'
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            date:
              $ref: '#/components/schemas/Time'
            type:
              type: string
    Concert:
      type: object
      allOf:
        - $ref: '#/components/schemas/MusicPerformanceManifestation'
        - type: object
          properties:
            place:
              $ref: '#/components/schemas/UnconfirmedPlace'
            time:
              $ref: '#/components/schemas/Time'
            extent:
              type: string
            concertProgramme:
              type: array
              items:
                $ref: '#/components/schemas/MusicalWorkPerformance'
            concertSeries:
              type: string
    ConferenceAbstract:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    ConferenceLecture:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    ConferencePoster:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    ConferenceReport:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    ConfirmedDocument:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/RelatedDocument'
        - type: object
          properties:
            identifier:
              type: string
              format: uri
            type:
              type: string
    ConfirmedFunding:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/Funding'
        - type: object
          properties:
            id:
              type: string
              format: uri
            type:
              type: string
    Contributor:
      required:
        - type
      type: object
      properties:
        identity:
          $ref: '#/components/schemas/Identity'
        affiliations:
          type: array
          items:
            $ref: '#/components/schemas/Corporation'
        role:
          $ref: '#/components/schemas/RoleType'
        sequence:
          type: integer
          format: int32
        correspondingAuthor:
          type: boolean
        type:
          type: string
    Corporation:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/Agent'
        - type: object
          properties:
            type:
              type: string
    Course:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    CristinIdentifier:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalIdentifierBase'
    CustomerRightsRetentionStrategy:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/RightsRetentionStrategy'
        - type: object
          properties:
            type:
              type: string
    DataManagementPlan:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            related:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/RelatedDocument'
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    DataSet:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            userAgreesToTermsAndConditions:
              type: boolean
            geographicalCoverage:
              $ref: '#/components/schemas/GeographicalDescription'
            referencedBy:
              uniqueItems: true
              type: array
              items:
                type: string
                format: uri
            related:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/RelatedDocument'
            compliesWith:
              uniqueItems: true
              type: array
              items:
                type: string
                format: uri
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    DefinedDuration:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/Duration'
        - type: object
          properties:
            minutes:
              type: integer
              format: int32
            hours:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            weeks:
              type: integer
              format: int32
            type:
              type: string
    Degree:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            series:
              $ref: '#/components/schemas/BookSeries'
            seriesTitle:
              type: string
              writeOnly: true
            seriesNumber:
              type: string
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            isbnList:
              type: array
              items:
                type: string
            courseCode:
              $ref: '#/components/schemas/Course'
            revision:
              type: string
              enum:
                - Revised
                - Unrevised
            course:
              $ref: '#/components/schemas/Course'
            additionalIdentifiers:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/AdditionalIdentifier'
            type:
              type: string
    DegreeBachelor:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            submittedDate:
              $ref: '#/components/schemas/PublicationDate'
            type:
              type: string
    DegreeLicentiate:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            submittedDate:
              $ref: '#/components/schemas/PublicationDate'
            type:
              type: string
    DegreeMaster:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            submittedDate:
              $ref: '#/components/schemas/PublicationDate'
            type:
              type: string
    DegreePhd:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            submittedDate:
              $ref: '#/components/schemas/PublicationDate'
            related:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/RelatedDocument'
            type:
              type: string
    Duration:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    Encyclopedia:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    EncyclopediaChapter:
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
    EntityDescription:
      required:
        - type
      type: object
      properties:
        mainTitle:
          type: string
        alternativeTitles:
          type: object
          additionalProperties:
            type: string
        language:
          type: string
          format: uri
        publicationDate:
          $ref: '#/components/schemas/PublicationDate'
        contributors:
          type: array
          items:
            $ref: '#/components/schemas/Contributor'
        alternativeAbstracts:
          type: object
          additionalProperties:
            type: string
        npiSubjectHeading:
          type: string
        tags:
          type: array
          items:
            type: string
        description:
          type: string
        reference:
          $ref: '#/components/schemas/Reference'
        metadataSource:
          type: string
          format: uri
        abstract:
          type: string
        type:
          type: string
    Event:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            label:
              type: string
            place:
              $ref: '#/components/schemas/Place'
            time:
              $ref: '#/components/schemas/Time'
            agent:
              $ref: '#/components/schemas/Agent'
            product:
              type: string
              format: uri
            subEvent:
              $ref: '#/components/schemas/Event'
            type:
              type: string
    Exhibition:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/ArchitectureOutput'
        - type: object
          properties:
            name:
              type: string
            place:
              $ref: '#/components/schemas/UnconfirmedPlace'
            organizer:
              type: string
            date:
              $ref: '#/components/schemas/Period'
            otherInformation:
              type: string
            type:
              type: string
    ExhibitionBasic:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExhibitionProductionManifestation'
        - type: object
          properties:
            organization:
              $ref: '#/components/schemas/UnconfirmedOrganization'
            place:
              $ref: '#/components/schemas/UnconfirmedPlace'
            date:
              $ref: '#/components/schemas/Period'
    ExhibitionCatalog:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    ExhibitionCatalogChapter:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    ExhibitionCatalogReference:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/ExhibitionProductionManifestation'
        - type: object
          properties:
            id:
              type: string
              format: uri
            type:
              type: string
    ExhibitionContent:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            type:
              type: string
    ExhibitionMentionInPublication:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExhibitionProductionManifestation'
        - type: object
          properties:
            title:
              type: string
            issue:
              type: string
            pages:
              type: string
            date:
              $ref: '#/components/schemas/Time'
            otherInformation:
              type: string
    ExhibitionOtherPresentation:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/ExhibitionProductionManifestation'
        - type: object
          properties:
            typeDescription:
              type: string
            description:
              type: string
            place:
              $ref: '#/components/schemas/UnconfirmedPlace'
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            date:
              $ref: '#/components/schemas/Instant'
            type:
              type: string
    ExhibitionProduction:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/ExhibitionProductionSubtype'
            manifestations:
              type: array
              items:
                $ref: '#/components/schemas/ExhibitionProductionManifestation'
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    ExhibitionProductionManifestation:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    ExhibitionProductionSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - BasicExhibition
            - TemporaryExhibition
            - PopupExhibition
            - AmbulatingExhibition
            - DigitalExhibition
            - HistoricalInterior
            - ExhibitionProductionOther
        description:
          type: string
          writeOnly: true
    File:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/AssociatedArtifact'
        - type: object
          properties:
            identifier:
              type: string
              format: uuid
            name:
              type: string
            mimeType:
              type: string
            size:
              type: integer
              format: int64
            license:
              type: string
              format: uri
            administrativeAgreement:
              type: boolean
            publisherVersion:
              type: string
              enum:
                - PublishedVersion
                - AcceptedVersion
            embargoDate:
              type: string
              format: date-time
            rightsRetentionStrategy:
              $ref: '#/components/schemas/RightsRetentionStrategy'
            legalNote:
              type: string
            publishedDate:
              type: string
              format: date-time
            uploadDetails:
              $ref: '#/components/schemas/UploadDetails'
            visibleForNonOwner:
              type: boolean
            type:
              type: string
    FunderRightsRetentionStrategy:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/RightsRetentionStrategy'
        - type: object
          properties:
            type:
              type: string
    Funding:
      required:
        - type
      type: object
      properties:
        identifier:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        source:
          type: string
          format: uri
        fundingAmount:
          $ref: '#/components/schemas/MonetaryAmount'
        activeFrom:
          type: string
          format: date-time
        activeTo:
          type: string
          format: date-time
        type:
          type: string
    GeographicalContent:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            type:
              type: string
    GeographicalDescription:
      required:
        - type
      type: object
      properties:
        description:
          type: string
        type:
          type: string
    HandleIdentifier:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalIdentifierBase'
    Identity:
      required:
        - type
      type: object
      properties:
        id:
          type: string
          format: uri
        name:
          type: string
        nameType:
          type: string
          enum:
            - Organizational
            - Personal
        orcId:
          type: string
        verificationStatus:
          type: string
          enum:
            - Verified
            - CannotBeEstablished
            - NotVerified
        additionalIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalIdentifier'
        type:
          type: string
    ImportDetail:
      required:
        - type
      type: object
      properties:
        importDate:
          type: string
          format: date-time
        importSource:
          $ref: '#/components/schemas/ImportSource'
        type:
          type: string
    ImportSource:
      required:
        - type
      type: object
      properties:
        source:
          type: string
          enum:
            - BRAGE
            - CRISTIN
            - SCOPUS
        archive:
          type: string
        type:
          type: string
    ImportUploadDetails:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/UploadDetails'
        - type: object
          properties:
            source:
              type: string
              enum:
                - Brage
                - Scopus
            archive:
              type: string
            uploadedDate:
              type: string
              format: date-time
            type:
              type: string
    Instant:
      required:
        - type
      type: object
      properties:
        value:
          type: string
          format: date-time
        type:
          type: string
    Introduction:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    Ismn:
      required:
        - type
      type: object
      properties:
        value:
          type: string
        formatted:
          type: string
        type:
          type: string
    Isrc:
      required:
        - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    Journal:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            id:
              type: string
              format: uri
            type:
              type: string
    JournalCorrigendum:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            pages:
              $ref: '#/components/schemas/Range'
            corrigendumFor:
              type: string
              format: uri
            type:
              type: string
    JournalIssue:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    JournalLeader:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    JournalLetter:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    JournalReview:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    Lecture:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    LiteraryArts:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/LiteraryArtsSubtype'
            manifestations:
              type: array
              items:
                $ref: '#/components/schemas/LiteraryArtsManifestation'
            description:
              type: string
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    LiteraryArtsAudioVisual:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/LiteraryArtsManifestation'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/LiteraryArtsAudioVisualSubtype'
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            isbnList:
              type: array
              items:
                type: string
            extent:
              type: integer
              format: int32
            type:
              type: string
    LiteraryArtsAudioVisualSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - Audiobook
            - RadioPlay
            - ShortFilm
            - Podcast
            - LiteraryArtsAudioVisualOther
        description:
          type: string
          writeOnly: true
    LiteraryArtsManifestation:
      required:
        - type
      type: object
      properties:
        publicationDate:
          $ref: '#/components/schemas/PublicationDate'
        type:
          type: string
    LiteraryArtsMonograph:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/LiteraryArtsManifestation'
        - type: object
          properties:
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            isbnList:
              type: array
              items:
                type: string
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    LiteraryArtsPerformance:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/LiteraryArtsManifestation'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/LiteraryArtsPerformanceSubtype'
            place:
              $ref: '#/components/schemas/UnconfirmedPlace'
            type:
              type: string
    LiteraryArtsPerformanceSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - Reading
            - Play
            - LiteraryArtsPerformanceOther
        description:
          type: string
          writeOnly: true
    LiteraryArtsSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - Novel
            - Poetry
            - Novella
            - ShortFiction
            - Essay
            - Translation
            - Retelling
            - Play
            - LiteraryArtsOther
        description:
          type: string
          writeOnly: true
    LiteraryArtsWeb:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/LiteraryArtsManifestation'
        - type: object
          properties:
            id:
              type: string
              format: uri
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            type:
              type: string
    Map:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            description:
              type: string
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    MediaBlogPost:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    MediaContribution:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            medium:
              $ref: '#/components/schemas/MediaSubType'
            format:
              type: string
              enum:
                - Text
                - Sound
                - Video
            disseminationChannel:
              type: string
            partOf:
              $ref: '#/components/schemas/SeriesEpisode'
            type:
              type: string
    MediaContributionPeriodical:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            id:
              type: string
              format: uri
            type:
              type: string
    MediaFeatureArticle:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    MediaInterview:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    MediaParticipationInRadioOrTv:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    MediaPodcast:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    MediaReaderOpinion:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    MediaSubType:
      type: object
      properties:
        type:
          type: string
          enum:
            - Journal
            - Radio
            - TV
            - Internet
            - MediaTypeOther
        description:
          type: string
          writeOnly: true
    MentionInPublication:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/ArchitectureOutput'
        - type: object
          properties:
            title:
              type: string
            issue:
              type: string
            date:
              $ref: '#/components/schemas/Time'
            otherInformation:
              type: string
            type:
              type: string
    MonetaryAmount:
      type: object
      properties:
        currency:
          type: string
          enum:
            - NOK
            - EUR
            - USD
            - GBP
        amount:
          type: integer
          format: int64
    MonographPages:
      required:
        - type
      type: object
      properties:
        introduction:
          $ref: '#/components/schemas/Range'
        pages:
          type: string
        illustrated:
          type: boolean
        type:
          type: string
    MovingPicture:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/MovingPictureSubtype'
            description:
              type: string
            outputs:
              type: array
              items:
                $ref: '#/components/schemas/MovingPictureOutput'
            duration:
              $ref: '#/components/schemas/Duration'
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    MovingPictureOutput:
      required:
        - type
      type: object
      properties:
        sequence:
          type: integer
          format: int32
        type:
          type: string
    MovingPictureSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - Film
            - ShortFilm
            - SerialFilmProduction
            - InteractiveFilm
            - AugmentedVirtualRealityFilm
            - MovingPictureOther
        description:
          type: string
          writeOnly: true
    MusicMediaSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - CompactDisc
            - DVD
            - Streaming
            - DigitalFile
            - Vinyl
            - MusicMediaOther
        description:
          type: string
          writeOnly: true
    MusicPerformance:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            manifestations:
              type: array
              items:
                $ref: '#/components/schemas/MusicPerformanceManifestation'
            duration:
              $ref: '#/components/schemas/Duration'
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    MusicPerformanceManifestation:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    MusicScore:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/MusicPerformanceManifestation'
        - type: object
          properties:
            ensemble:
              type: string
            movements:
              type: string
            extent:
              type: string
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            ismn:
              $ref: '#/components/schemas/Ismn'
            type:
              type: string
    MusicTrack:
      required:
        - type
      type: object
      properties:
        title:
          type: string
        composer:
          type: string
        extent:
          type: string
        type:
          type: string
    MusicalWork:
      required:
        - type
      type: object
      properties:
        title:
          type: string
        composer:
          type: string
        type:
          type: string
    MusicalWorkPerformance:
      type: object
      properties:
        title:
          type: string
        composer:
          type: string
        premiere:
          type: boolean
    NonFictionChapter:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    NonFictionMonograph:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    NullAssociatedArtifact:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/AssociatedArtifact'
        - type: object
          properties:
            type:
              type: string
    NullDuration:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/Duration'
        - type: object
          properties:
            type:
              type: string
    NullPages:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    NullPublisher:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublishingHouse'
        - type: object
          properties:
            type:
              type: string
    NullRightsRetentionStrategy:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/RightsRetentionStrategy'
        - type: object
          properties:
            type:
              type: string
    Organization:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/Corporation'
        - type: object
          properties:
            id:
              type: string
              format: uri
            type:
              type: string
    OtherPerformance:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/MusicPerformanceManifestation'
        - type: object
          properties:
            performanceType:
              type: string
            place:
              $ref: '#/components/schemas/UnconfirmedPlace'
            extent:
              type: string
            musicalWorks:
              type: array
              items:
                $ref: '#/components/schemas/MusicalWork'
            type:
              type: string
    OtherPresentation:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    OtherRelease:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/MovingPictureOutput'
        - type: object
          properties:
            description:
              type: string
            place:
              $ref: '#/components/schemas/UnconfirmedPlace'
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            date:
              $ref: '#/components/schemas/Instant'
            type:
              type: string
    OtherStudentWork:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            submittedDate:
              $ref: '#/components/schemas/PublicationDate'
            type:
              type: string
    OverriddenRightsRetentionStrategy:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/RightsRetentionStrategy'
        - type: object
          properties:
            overriddenBy:
              type: string
            type:
              type: string
    Pages:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    PerformingArts:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/PerformingArtsSubtype'
            description:
              type: string
            outputs:
              type: array
              items:
                $ref: '#/components/schemas/PerformingArtsOutput'
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    PerformingArtsOutput:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    PerformingArtsSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - TheatricalProduction
            - Broadcast
            - PerformingArtsOther
        description:
          type: string
          writeOnly: true
    PerformingArtsVenue:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PerformingArtsOutput'
        - type: object
          properties:
            place:
              $ref: '#/components/schemas/Place'
            date:
              $ref: '#/components/schemas/Time'
            sequence:
              type: integer
              format: int32
            type:
              type: string
    Period:
      required:
        - type
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
        type:
          type: string
    Place:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    PopularScienceArticle:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            type:
              type: string
    PopularScienceChapter:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            type:
              type: string
    PopularScienceMonograph:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    ProfessionalArticle:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            type:
              type: string
    Publication:
      required:
        - type
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/SortableIdentifier'
        status:
          type: string
          enum:
            - NEW
            - DRAFT
            - PUBLISHED_METADATA
            - PUBLISHED
            - DELETED
            - UNPUBLISHED
            - DRAFT_FOR_DELETION
        resourceOwner:
          $ref: '#/components/schemas/ResourceOwner'
        publisher:
          $ref: '#/components/schemas/Organization'
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        publishedDate:
          type: string
          format: date-time
        indexedDate:
          type: string
          format: date-time
        handle:
          type: string
          format: uri
        doi:
          type: string
          format: uri
        link:
          type: string
          format: uri
        entityDescription:
          $ref: '#/components/schemas/EntityDescription'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ResearchProject'
        fundings:
          type: array
          items:
              oneOf:
                - $ref: '#/components/schemas/ConfirmedFunding'
                - $ref: '#/components/schemas/UnconfirmedFunding'
        additionalIdentifiers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AdditionalIdentifierBase'
        subjects:
          type: array
          items:
            type: string
            format: uri
        associatedArtifacts:
          type: array
          properties:
            empty:
              type: boolean
            first:
              $ref: '#/components/schemas/AssociatedArtifact'
            last:
              $ref: '#/components/schemas/AssociatedArtifact'
          items:
            $ref: '#/components/schemas/AssociatedArtifact'
        rightsHolder:
          type: string
        duplicateOf:
          type: string
          format: uri
        publicationNotes:
          type: array
          items:
            $ref: '#/components/schemas/PublicationNoteBase'
        curatingInstitutions:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uri
        importDetails:
          type: array
          items:
            $ref: '#/components/schemas/ImportDetail'
        modelVersion:
          type: string
        type:
          type: string
    PublicationContext:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    PublicationDate:
      required:
        - type
      type: object
      properties:
        year:
          type: string
        month:
          type: string
        day:
          type: string
        type:
          type: string
    PublicationInstancePages:
      required:
        - type
      type: object
      properties:
        pages:
          $ref: '#/components/schemas/Pages'
        type:
          type: string
    PublicationNote:
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationNoteBase'
    PublicationNoteBase:
      required:
        - type
      type: object
      properties:
        note:
          type: string
        type:
          type: string
    PublishedFile:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/File'
        - type: object
          properties:
            type:
              type: string
    Publisher:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublishingHouse'
        - type: object
          properties:
            id:
              type: string
              format: uri
            type:
              type: string
    PublishingHouse:
      required:
        - type
      type: object
      properties:
        valid:
          type: boolean
        type:
          type: string
    Range:
      required:
        - type
      type: object
      properties:
        begin:
          type: string
        end:
          type: string
        type:
          type: string
    Reference:
      required:
        - type
      type: object
      properties:
        publicationContext:
          $ref: '#/components/schemas/PublicationContext'
        doi:
          type: string
          format: uri
        publicationInstance:
          $ref: '#/components/schemas/PublicationInstancePages'
        type:
          type: string
    RelatedDocument:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    Report:
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            series:
              $ref: '#/components/schemas/BookSeries'
            seriesTitle:
              type: string
              writeOnly: true
            seriesNumber:
              type: string
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            isbnList:
              type: array
              items:
                type: string
            revision:
              type: string
              enum:
                - Revised
                - Unrevised
            additionalIdentifiers:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/AdditionalIdentifier'
    ReportBasic:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    ReportBookOfAbstract:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    ReportPolicy:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    ReportResearch:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    ReportWorkingPaper:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    ResearchData:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            publisher:
              $ref: '#/components/schemas/PublishingHouse'
            type:
              type: string
    ResearchProject:
      required:
        - type
      type: object
      properties:
        id:
          type: string
          format: uri
        name:
          type: string
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/Approval'
        type:
          type: string
    ResourceOwner:
      type: object
      properties:
        owner:
          type: string
        ownerAffiliation:
          type: string
          format: uri
    RightsRetentionStrategy:
      required:
        - type
      type: object
      properties:
        configuredType:
          type: string
          enum:
            - Unknown
            - NullRightsRetentionStrategy
            - RightsRetentionStrategy
            - OverridableRightsRetentionStrategy
        type:
          type: string
    RoleType:
      type: object
      properties:
        type:
          type: string
          enum:
            - AcademicCoordinator
            - Actor
            - Advisor
            - Architect
            - ArchitecturalPlanner
            - Artist
            - ArtisticDirector
            - AudioVisualContributor
            - Choreographer
            - CollaborationPartner
            - Composer
            - Conductor
            - Consultant
            - Conservator
            - ContactPerson
            - CostumeDesigner
            - Creator
            - Curator
            - CuratorOrganizer
            - Dancer
            - DataCollector
            - DataCurator
            - DataManager
            - Designer
            - Director
            - Distributor
            - Dramatist
            - Dramaturge
            - Editor
            - EditorialBoardMember
            - ExhibitionDesigner
            - Funder
            - HostingInstitution
            - Illustrator
            - InteriorArchitect
            - InterviewSubject
            - Journalist
            - LandscapeArchitect
            - Librettist
            - LightDesigner
            - Musician
            - MuseumEducator
            - Organizer
            - RoleOther
            - Producer
            - Photographer
            - ProductionDesigner
            - ProgrammeLeader
            - ProgrammeParticipant
            - ProjectLeader
            - ProjectManager
            - ProjectMember
            - Registrar
            - RegistrationAgency
            - RegistrationAuthority
            - RelatedPerson
            - Researcher
            - ResearchGroup
            - RightsHolder
            - Scenographer
            - Screenwriter
            - Soloist
            - SoundDesigner
            - Supervisor
            - TranslatorAdapter
            - VfxSupervisor
            - VideoEditor
            - WorkPackageLeader
            - Writer
    ScopusIdentifier:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalIdentifierBase'
    Series:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/BookSeries'
        - type: object
          properties:
            id:
              type: string
              format: uri
            type:
              type: string
    SeriesEpisode:
      required:
        - type
      type: object
      properties:
        seriesName:
          type: string
        seriesPart:
          type: string
        type:
          type: string
    SortableIdentifier:
      type: object
    StudyProtocol:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
            volume:
              type: string
            issue:
              type: string
            articleNumber:
              type: string
            type:
              type: string
    Textbook:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/MonographPages'
            type:
              type: string
    TextbookChapter:
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            pages:
              $ref: '#/components/schemas/Range'
    Time:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    UnconfirmedCourse:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/Course'
        - type: object
          properties:
            code:
              type: string
            type:
              type: string
    UnconfirmedDocument:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/RelatedDocument'
        - type: object
          properties:
            text:
              type: string
            type:
              type: string
    UnconfirmedFunding:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/Funding'
        - type: object
          properties:
            type:
              type: string
    UnconfirmedJournal:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            title:
              type: string
            printIssn:
              type: string
            onlineIssn:
              type: string
            type:
              type: string
    UnconfirmedMediaContributionPeriodical:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationContext'
        - type: object
          properties:
            title:
              type: string
            printIssn:
              type: string
            onlineIssn:
              type: string
            type:
              type: string
    UnconfirmedOrganization:
      required:
        - type
      type: object
      properties:
        name:
          type: string
        type:
          type: string
    UnconfirmedPlace:
      required:
        - type
      type: object
      properties:
        label:
          type: string
        country:
          type: string
        type:
          type: string
    UnconfirmedPublisher:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublishingHouse'
        - type: object
          properties:
            name:
              type: string
            type:
              type: string
    UnconfirmedSeries:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/BookSeries'
        - type: object
          properties:
            title:
              type: string
            issn:
              type: string
            onlineIssn:
              type: string
            type:
              type: string
    UndefinedDuration:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/Duration'
        - type: object
          properties:
            value:
              type: string
            type:
              type: string
    UnpublishedFile:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/File'
        - type: object
          properties:
            type:
              type: string
    UnpublishingNote:
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationNoteBase'
        - type: object
          properties:
            createdBy:
              type: string
            createdDate:
              type: string
              format: date-time
    UploadDetails:
      required:
        - type
      type: object
      properties:
        type:
          type: string
    UserUploadDetails:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/UploadDetails'
        - type: object
          properties:
            uploadedBy:
              type: string
            uploadedDate:
              type: string
              format: date-time
            type:
              type: string
    Venue:
      required:
        - type
      type: object
      properties:
        place:
          $ref: '#/components/schemas/Place'
        date:
          $ref: '#/components/schemas/Time'
        sequence:
          type: integer
          format: int32
        type:
          type: string
    VisualArts:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicationInstancePages'
        - type: object
          properties:
            subtype:
              $ref: '#/components/schemas/VisualArtsSubtype'
            description:
              type: string
            venues:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/Venue'
            pages:
              $ref: '#/components/schemas/NullPages'
            type:
              type: string
    VisualArtsSubtype:
      type: object
      properties:
        type:
          type: string
          enum:
            - IndividualExhibition
            - CollectiveExhibition
            - Installation
            - ArtInPublicSpace
            - Performance
            - VisualArts
            - AudioArt
            - ArtistBook
            - VisualArtsOther
        description:
          type: string
          writeOnly: true
  #endregion
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref: CognitoAuthorizerArn
          - Ref: ExternalCognitoAuthorizerArn
