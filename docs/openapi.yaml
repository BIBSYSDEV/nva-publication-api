openapi: 3.0.3
info:
  title: NVA Publication API
  version: 1.0.0
paths:
  /:
    post:
      summary: Create Publication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publication'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert'
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreatePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /{publicationIdentifier}:
    get:
      summary: Fetch Publication by Identifier

      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to fetch.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchPublicationFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Publication'
            application/vnd.datacite.datacite+xml:
              schema:
                $ref: '#/components/schemas/PublicationDataCiteXml'
            application/vnd.schemaorg.ld+json:
              schema:
                $ref: '#/components/schemas/PublicationSchemaOrg'
        '410':
          description: Permanently gone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update Publication for Identifier
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert'
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publication'
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to update.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdatePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
    delete:
      summary: Delete Publication for Identifier
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-upsert']
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          description: UUID identifier of the Publication to delete.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaDeletePublicationFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
  /by-owner:
    get:
      summary: Get Publications by Owner
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/publication-read'
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaPublicationsByOwnerFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publication'

  /{publicationIdentifier}/doi:
    post:
      summary: Reserves doi for draft publication
      parameters:
        - in: path
          name: publicationIdentifier
          schema:
            type: string
            format: uuid
          required: true
          example:
            doi: '10.3848/135f2cf8-b816-11ed-afa1-0242ac120002'
          description: UUID identifier of the Publication to fetch.
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReserveDoiHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK, doi is already reserved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doi'
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doi'
        '401':
          description: Unauthorized, no config found for users customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: Publication not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '405':
          description: Operation is not allowed, publication is not a draft
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '502':
          description: Bad response from Datacite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"


  /{publicationIdentifier}/ticket:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
    post:
      description: Create a new ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTicketRequest"
      responses:
        201:
          description: ACCEPTED
          headers:
            Location:
              description: URI to created ticket
              schema:
                type: string
                format: URI
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Ticket"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTicketFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/ticket/{ticketIdentifier}:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
    get:
      description: Get an existing ticket
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Ticket"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTicketFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    put:
      description: Update the status of an existing ticket
      requestBody:
        description: A Ticket Object containing the new ticket status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Ticket"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Problem"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Problem"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Problem"
        405:
          description: Operation not allowed
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Problem"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Problem"
        502:
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Problem"
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTicketFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/ticket/{ticketIdentifier}/message:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
    post:
      description: Add message to ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: "Created"
          headers:
            "Location":
              description: The URI of the created message
              schema:
                type: string
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateMessageFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/ticket/{ticketIdentifier}/viewed:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
      - in: path
        name: ticketIdentifier
        schema:
          type: string
        required: true
    post:
      description: Update Ticket viewed status.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateViewStatusRequest'
      responses:
        '303':
          description: "See other"
          headers:
            "Location":
              description: The URI of the updated ticket
              schema:
                type: string
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTicketViewStatusHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /tickets:
    get:
      description: List tickets for user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketCollection"

      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTicketsHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
  /{publicationIdentifier}/tickets:
    parameters:
      - in: path
        name: publicationIdentifier
        schema:
          type: string
        required: true
    get:
      description: List tickets for publication
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketCollection"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

      security:
        - CognitoUserPool: [ 'https://api.nva.unit.no/scopes/backend', 'https://api.nva.unit.no/scopes/frontend','aws.cognito.signin.user.admin' ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTicketsForPublicationHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY

components:
  schemas:
    Publication:
      type: object
    PublicationDataCiteXml:
      type: object
    PublicationSchemaOrg:
      type: object
    Problem:
      type: object
      properties:
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
    Message:
      description: Message
      type: object
      properties:
        sender:
          type: string
        owner:
          type: string
        date:
          type: string
    NewTicketRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
    Doi:
      type: object
      properties:
        doi:
          type: string
    Ticket:
      type: object
      properties:
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
        viewedBy:
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Closed
    UpdateViewStatusRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - UpdateViewStatusRequest
        viewedStatus:
          type: string
          enum:
            - Read
            - Unread
    TicketCollection:
      type: object
      properties:
        type:
          type: string
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/Ticket"

  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref: CognitoAuthorizerArn
          - Ref: ExternalCognitoAuthorizerArn