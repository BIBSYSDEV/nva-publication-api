project.ext {
    jaxbTargetDir = file("$buildDir/generated/sources/xjc")
}

sourceSets.main.java.srcDirs += jaxbTargetDir

configurations {
    xjc
}

dependencies {
    xjc libs.bundles.xsd2java
    implementation libs.bundles.xsd2java
}

@CacheableTask
abstract class Xsd2Pojo extends DefaultTask {

    @InputFile
    @PathSensitive(PathSensitivity.RELATIVE)
    abstract RegularFileProperty getBindingFile()

    @Input
    abstract Property<String> getSchemaUri();

    @Classpath
    abstract ConfigurableFileCollection getXjcClasspath()

    @OutputDirectory
    abstract DirectoryProperty getOutputDir()

    @TaskAction
    void generate() {
        getOutputDir().get().asFile.mkdirs()
        def normalizedClasspath = getXjcClasspath().files.toSorted()

        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJC2Task',
                classpath: normalizedClasspath.collect { it.absolutePath }.join(File.pathSeparator)
        )
        ant.xjc(
                destdir: getOutputDir().get().asFile,
                package: 'no.scopus.generated',
                schema: getSchemaUri().get(),
                binding: getBindingFile().get().asFile.path
        )
    }
}

tasks.register('xsd2java', Xsd2Pojo) {
    schemaUri = 'https://schema.elsevier.com/dtds/document/abstracts/xocs-ani515.xsd'
    bindingFile = file('src/main/resources/xocs-ani515.xjb')
    xjcClasspath = configurations.xjc
    outputDir = jaxbTargetDir
}

tasks.withType(Jar).configureEach {
    outputs.cacheIf { true }
}

tasks.withType(JavaCompile).configureEach {
    dependsOn(xsd2java)
}

tasks.withType(Checkstyle).configureEach {
    exclude { '**/generated/*' }
}

tasks.withType(Pmd).configureEach {
    exclude { '**/generated/*' }
}